%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: document.dvi
%%CreationDate: Sun Aug 30 08:24:19 2020
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMR12 CMR8 CMCSC10 CMBX12 CMMI12 CMMI8 CMSY10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips.exe -o document.ps document.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.08.30:0924
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMCSC10
%!PS-AdobeFont-1.0: CMCSC10 003.002
%%Title: CMCSC10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMCSC10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMCSC10 known{/CMCSC10 findfont dup/UniqueID known{dup
/UniqueID get 5087402 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMCSC10 def
/FontBBox {14 -250 1077 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMCSC10.) readonly def
/FullName (CMCSC10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 65 /A put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 78 /N put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BB89566A9BDEC70EB4F2
048A6EB631F05C014D372103E37FC3FA317EBC9973565A638403DA02E48B7D31
CFF6C241DC5CDB470561002FF46437C06EF93BC99352DF04393C661FFFBF4BA2
0723ABD9B3E9CA9E63BA57EFDBAE684655CBBDBA15ADAE43E1A2C98A3CF060A3
D16AF8FE3A49B50A24C20EEED716E49AF6013D4D38CD9CC41A91C17E4D04D79D
567E1EF49110AA9C34464E95D81A730ECEB2C9AF38FBA6B45E253288438B4CB3
DC75B3A906D4357293BA41E59C35223A6C9CBD6FF5FC90C2D07CBB376C7320FF
435A6251822BFCBB612CE630EDF826C37E95F541C21B93FCE127591D5E38165E
2B58A34AAE37712BC58B63FFD70AB80F4F24612CFD2F1466BAAF3CA2BCB45148
D0DEA0E9B8FBA4C4FF5B8B3CB02E461355051842BD1C94F41066B9B909DB83B1
DCDCBEF7CD00A43E4C0B8191A29600CA197F0BA227FB8309BB539D2A620BAC70
8A1AB2DFA51ADC9873B8E5582DCD3ED154E5D727D1665F99BD89883D69E6CC2F
DB3A57AEB612171A88E22F038461DE03FC357F771675E34E90D4D19B4B36891C
9D2333960400E97494F4FC4DBCE6A73C34A0409E433BBDC0AAAEBA7D3555066E
1CFBB4515C8B573C9B9DD12ED5B6ECEBE35AD0DDEA9DB004FC6CB540B5117B49
59CABE5FD74C6F5B6482B42C20B5FF0467D1DBD7CED2CC651CA57852B6FBB402
A6764DB342889132C911CAA713A7F2FDD8A5E849345D6C81025E02F5B8B682BA
90CC9B467FBC37362436EA6BF8EB62D784B01D5430147945BC09D1F49EE89F2E
3E2B8E6D439248A56F82F2E03EA5C7A922F2813BE6538A3A423BEBC55B345AFB
3B3C125306749E137C647D78028AE1FBF3E1A82C260132832A9668F454D39C41
736717DED0A99F6B11F005F0E1D07FE84713AAB4C042FDC166AA146D7B5E9198
E4F485BE5B135EA281FF1C1E616B5AAF02771F58C5840CB5A427FF9794F93E94
17FD799C78AED1DC4810BCEF4C6C51D3C1504EA2C6F2B29805B7ECF97B5F637D
FE92E168CB9029E90404CB54FB312FC7AA8A9F2F524C03E61F03B1E31D4F061E
1677B39D5D30C9FD4673E1723F4AE3CCF38593AD6D7F61E9DF3C010E51F25085
35D51105E1464BA146A78D7297D4D310AD91342A0BB942034A3EC0696B467367
3E39D202D637E6B14D0EBCA6AD3CF22B07D4CA69C0FCBB6C93782B2F0DFC5AC1
5D8A16CB5EDB671A0C1BA9D10F63CEAFCD0E06E42C730C8EF769CCFD57937245
658F486036D37E8BDDE5670A212FB488A8753322A5B170C9662750AA958C0BBD
8E97D8239D2A08B30416504DEEC4E506013E037C91785C674F8A6A44E23FEE6F
CCC00CC5E4D355B0871FDB8ECD64F70EE32449BB5D6F84F8C8AA2D5B1A489BA9
D7FF2DBAA8D0B84054E93D64D3E77850A3724824914A0F821EEC3D605DD851A7
606936B8B9E24D6E932E16C448140FE94DD96C75AECB73850035ED9C04A1D93C
64B21E7D4657E030483EC5C3554AEF8BE4D0FE5B9743B875340B09E01273DAE8
F256C50A1A8F2E0417440A8BB0173F59E11523E1CEF2593A4AC5AF2167627B00
C5EA97D125EB8A4BD4C372877ABF10F5B7B149D73787E0834BFB3084E9508DF7
072DD71637019599252059738D4D6BC57A9358E4B14F6AF9C4B31DB8E25C29B3
7A15F9953BD73ACDE5F0445A5DC406BB4635FAE51C1D8202AE31730E6F355317
1DC197DB0B6177307C60E5D38F4487363EE051B2E609A52BC4D45B14B6558B6B
5E1618748794B8340752CDBE7756C068975B559615D4CD5A97CE30BAA7B2B1A3
2FEF2E055232B24FD8A21BECDE1B6A479A28EC80AE2CD16DB50B30B4A6CFCF06
491C7CD5AC29FB964D4846415233947522676DEABDA0D9535F8507D33693930C
B4E4240A02B0CE7EA288516B8A6EF908D7F8BAF9012D052C6AC96D9F8F6ADB07
8984F3559C5E7E3022A957982155FC9CD599C74E18328D3AB46F9DD15D1C4C3F
9B93ADB4489BA02CFCF57DE6270F3AD2F8597BE71786510EF08142F430EE5568
4F9DDB792B7C46B6135E341DBBF062FBC50FABA80CD4A384157BAE57CBEA9781
AA4416323265168AC097DE7E30A0D4750143A4FCE70A863A31876A8FA5327C3E
36E89589E363AA2B1A6E8B09F5AEB8FFFD0396067173465B6503383DE517A6EA
88C0FC08578398C2A721E5AEB29F4AC9BC990A50CD87BD35A11F9E81F68E7B85
5E5B95A4F9A5D30379EF90D78E1E466DEF867BAEFC4F5ED2C762BFF099C1C2B3
5E0DA1C2FB33BE1379413CDDB1EE6BB3A495331F72F2FAEB8152E8AD5FD334A8
AAB0082A71D5574B618EA8D487B8FAF1B445F3395B1E21224F5492A0E06F5152
7726835C900E2E52BE3B7B654183AEDEC68053DD0AF19EF6DBC10B6FC08EC7D0
CC0E2C8FAF8C9A4C21FB7C34E074BBA4EE64226BEC8C928A784C1BEE35B72EC8
E9295240B29DDC2539CD118BAC38DB3917D14CD33AB45FE47E827F2A2B193AFF
53C5396C52CEA4F43F06AC2D08C74CC85D608CBA267175EC31311EE25AB48DD9
FE811B411AE426C9FC0B6044D1EBF130231623F1566CEA4D1C06D8032FD9808A
94479C842BC41B675CF6B90113BD681F8D43F51D5016D80EDC11D7640FB950D4
E709A46184406ED90D0892A4CD9062938A8205697A200DBE1F38EB166EFEA0EC
4FCB45CDAF82EA103DD6FDD03D146F3E42EDA6496064DB3F4FC1C5280C9E604B
D5EBCA08BF2AAC90156C11EF68137DC76502EBF216F3AF3EE30DD2676D218428
F41C655093F8B530FCA378B5769F262A6FDB4B66B83F18F050E77227E28D71F4
5F4425CB8D51B3DAE872CD86D7804F870BC564A6DA1CA13EDB00D131CE4F6460
7021661B99612629DCC20C85CF155EDC5111E015A77B0B82A8FC1EBB374B7EF2
361419BA93B857D5C9944BB5B4AEDD86ABCC261542077FE09701C96370168579
5F89D5AAA08D700E2643E88C2FB8D1D56D37AAA9744872E7C050B4CE046B47A7
83F224FA9FD311C955EFBF173042C8FC66524135F579B1397828870D5C9DC71F
8615FADE2A1CFAEA90F732B6C266E2F3048FC43EDA7A6B6D98E9DB793CF457B3
F5877E7A055C92B0246FEA8C72B3B3456F93BF36E2651D32CD614C3AECC0B4BC
F824C8363E593A6458D37408FC5B09883B280005DD24123E2D4B1B85F4113327
EEDD9186A4AF2CD6439B46C5C168C125CA80F9EE9E68906620EE126CFBF26E15
B269838A54224EDCFE2A373EB750D4829BFA410DE5F1541E428BB1E024AF496D
F5F1C151F5A645C8622F2EF9088D57A2811868A8A8BFCDBFCE3ACB8463AC35B4
8B6F44E1C1232805842F56FA468F81FF37D5D55B81CA56058558544C142EB3BE
07CFB1F75DECB1E48C14D6AFDD455989AA6FFE8B8DC54F462B3C20E31D270BCE
8E68E2B43A6625AC7E9792704FAAD6CE8BBE0B341DA7189EBB3E9D5375B27FD4
12506D5BCA50AEDC6955E6C3C7BAA84BACAF7ABDF3A270C7734EC3C6EC22793B
E67B0E288F99699D38DA8B79F2D21DD97945FBDDD132A8F0BF947950D3C0B4AA
EB7B2C435AFE54489E1930610311D718AC610C21A644F34CB2D1959B3066F39B
EADEAB5CFC6AF4D191D86B02402B00D1C5262707861C5308730579795EB53207
A291A27A8B5C4DAE0A87A0C6A260026CA3CB620E1002E066A515D7990F3DEA29
0FAC962E0B82B7A6C86B1EDC54007822BAECED673FAAEF88C8109777EB79A53F
AF3C58546974F2F56E70E9B5CB59ACB5C27CB01895557B2D82134D7F02029B24
3331621F38E68717F5CB68A8892D0B9C0A8ED4F8BB56E80505170D44C6856128
2DED0254ADA4875CF56B4D97372AAE730D4C77A2940DC8C178274DF88A9EE037
215C6FE7B9D481EE4DE809B124C0270782411ACCCF89906A8B143D0BA8B2CEDE
E9B90465C3E57A4FD9AD2702323450256ABD09A1F8C26F08480317C08B75B720
70A161C99715A35A94DD5C9647ED0F8A5337B774C8E54F9653AC859485A1FED5
37B725A7E4BA58711CBCDA6054E34CBD8E9F9460179DA7DBD243D81A1531FDDE
BF2BD425BD9DBE75EAA333B1F5793669A215549A774597E6ADA16D323FE5601A
EDA41092730009A99BF5B5AAE281844A6BF3292D4D4EDE36B4FD8BCAEB6EB72F
AC5D3CD53D0D621CA9EA8D254FDCB2B5161EE9E80B266563F669805A3A15271A
0753983004A1ECC7FBADF62AFEA4DAB49A178C231759857DB910668BDB07CB3F
7E8EC24901863088B3231EE3FA563924032C91CA9D68DB398F9BD9AC0C651EC8
9051C9F709CD784F3FF5951DECD7E869ACC34B83AECDB011E6594347855EE7F5
28811F744A4BD70D4E9077EA7EC19FFCF612689F12B34332857AE41F13E6D16A
962DB9B6AAAC167B9FBDF0068EA13412F318384134B29F3F0C399F1973A3564E
F9C3C39B5BDD4C98D81A6CB476E565860B50704BD65ABD630A5F1372F2D826F3
3AD47C08B8AD3176A170C369EF3CEEB190134006D6135C5B8CCDBE1C11FFF1EC
3F6D8C46E15C4F5EB9ED9F31A129594D542D40DC3815CD075A0DBB648D868AF5
15A05C4BDB28BF23653A3AD96CF6AFC065DCCCB23D5D9A945F8CBB539DD3BFA8
DB8F1FBF9B6F25B41EB4309995CA3D5D6ABD70CBB4A2F0C6364E5439AD1045FF
72F6B45A30BD3A548CFAADDCC6C15D46F6D783D3E520215751DC98335A4ED512
D7D19235CDF911CC69F3CF4365B678EBF3E87C456A4E77339C74930083445588
462529C22A96A28C5CE87AFA0C981F26CAED5A1C8DBCDDA612624DBE0373F026
465185A4D8C73CCD8D71EE97116F8F7D341B87FD78F9CCB9FBDA2A7799711607
6BBA855AE9D5C505870DC85FDFAAA130A351D56AADBFBD6A7D52055E3200F8B7
8AE9A00092B55DEA8BDE224B4BA7FD4A191CB1FFC4CB995FEE1AC2883AB69E1A
AFFC09AB5B9AE311A030A5BA05E2213F9BBF016C8FA80689C069314D91274B20
53FCC65C7D7B3A7504887525BFFA060304931672A078BCD7F269595686310E34
E1ECA868899BC402D17EC36CE40D5041D7CEDA77F7764C9D98793F5334F574DF
E93CB10A5E8ADAE95CE63D2339557091B4B4911A4987CF21B7F1DBADBC2DD605
8EB72473C1F2EABCC44E0D0339EECB55DA74085606C3F89D57ACFBF5755A5395
CA8D4BD47E4EE8D8B882D3AB31A1F0C62E74654C7E041E4FF2693A38A9796064
46526B0A37E6B5BF8E48E80EDEF81E34DA8F6CC9025936A4D0E6D709D61B7B5C
AB550397117F3F9D2F5A542A64DEA8E1178F7337124D6B56BA92F659AAD694D7
391028731E01284BFEA635314A8DA8DF7A34EA3B6B2F8803BE6DCB423A9E8015
55EBD90EBAE8A00298B3B6B1C02BA516AF528122C1F2B07EF69F5466C2C36643
0D665D6561705509B7582D8301AF3C32E2F3B9433E3E04D62117C7E8A368BDE1
0D4DAA1C415B2A6573116D2A169AFEF700A83F55D88813585E89C94C07802BA8
3AE8F9BC3CDBFD9C2E35D062B1FD6E79E1EF104FC70B0AB09D12CA027F33F85A
22F0ECBB4AD55FE8C616B82C46CE69A600E4F767BD7A9C5F9B37A3196B038384
5DEF76A8884425FE598A63AEB19FA698C2AF7CAA4983CEC789268E22BA051EE0
20A40633D22D8F707626ED30E8273EAAD1C065F0B2E1718B5AC853ABE09330C3
B0082A71D557169BC1559B6D285A3499D41C4CCF1F74884EC3917EB9C574371E
AFE8578DDCA459B8D22C0188A8D150437B05FB92022C95EB6FBCC954216B5FED
CBC7C90B9A1F061376A9840FB64390A6BA99CFC8279A86A730C6DBFD14C53C4B
7277D676BD42203677E9ABEEC8C97E13DAA626474513B06F8734DD784F2FBBB9
B3B448B8E8221E380AB4A86D3A683B86A54129519D50DD4FE63B30954D805CED
A9A5D9A39C58B65B08E1C19555E927C6DBF7FD07252B2B57F62B905D6B488201
213D106A41033B26FFBAC2E616DA6ADA6D560BADF10E68872806CFD6F6E19D7B
57CF1F7A030A7BAD374F16A977E0ECB8742D034ADAF9C247DA19C8AEA74EF6CE
DAFD6B1DC562FD3B77E4D008BDE4D8C7FCA9895DA1AC9EAA01C32A0DA712B082
9438E77230D38FC4153E1711417B918BA6CC03203A5FF082AF880F48518D8271
C1121E4F1386B30A7F1BC6F10EA98443F8A65C867A109336B808BC9A8E2A75AC
F950835AA84B56F59DA4C8A18859C3B68F6B6DE09A6675F639EA9107BDB67B0F
54EBC564BC2D781B61C14363A54956BA78A2BB89C9F966C94EEFC29EE9F4E23E
C0BF750144DC289F0DEE1F8A25BB52E54F656FAFEE4BD2DA57E1306BBE648051
1D0CFD6A23A3DF082E3CF13197BF1B7FB22B2CD427BB78F455C9634DF989DC90
7BB2AE247B1C99AB2062855B2948341B0F857ACD750B59E370A6698C6A1F5287
72A4A9628A592E313956C242DF8277EDD2F1FDFB07CDC104275FFBF796D7518A
DF49FF3CDEC3BDFF1D290C382F244DF18005ECDABF0C5C2C64EEC4383E2E07DC
5C82587C071E59B46B7BEF31D268F39D9B12D534344FBA515E9DE8F166FAD1E2
7D1558967AAAD3829D3F7EC6938D20E5379F414532976ABA844D97A5E9078901
EAE4D0ED1F4C7EE7A2D80D891A5013D6409A38ACFA497F5A169EB7F9F4890DC4
62FA6A89EA48267331F086992B9CA9305E16611E6AEE67DCDD588A25D37F45B1
0DE75C802EE021E574B64B3969DE2E5061ED9364B646C38D4BBA86802CA6338A
94E135D2256920EBFB1AA22D9E90C7D16853F0DF9F2D942748EE540E4FCE63C6
5380D7AB4ADD6CB00FE8F7867E4862D8DB432F28331428CC350CDF7F447A65ED
D7683ECA35A22ADD06E9FE6BAF060913AEEE7B2B8EE4798E437698CC9EB2428E
74CE73F84D0D2292DE709D71FFF8901C3505370E6F1D4E28E6B7372492C65A88
159371B1D60D77CEC93B272B6C5394EE1D2EF9969DB2838B8E128553879A1BA5
2884B0A596E8FC3D1E648B7E26A4AC57DF09B9CE09B2F91D8CA618CA52AB3DBD
D005A56A420366069B73146A6F58E88BA49671A1AB7C2070C3D42AA770285143
40AE7D7868C0E1993506B07C086AD7D4F28CE2D15853FC5FBCBF9425D8012B9E
DB6E1E5002517659C8DA69DCEACA94F368537668843D281FC11782F1C5F71977
CA215349EE6F20565DE3D8D8212A40E1227A4B22965FA64A0B02C62BFDE97E6F
C3C54FED4057EF9D258C42D7440C78C5E0CC58A40DD74ECED4152F70A93CE71A
1B3A57C46F74A6D27BF98C97CCD31A8EA487260F224A3E40F52C65490AB4098A
7B9EEB54A5A415C8C88568F7D9EFE74BBB785FA18AA27D9201F28BBC477A20A5
D1307AA78EB8C7CAD409AB64B29E4115E45F5FADDCC80CA74B296C4265A40614
37F2ACD8386AC0202D6FDB6711E8CB06442F209D781E940ADDD6D881D4F8E874
357C533115923B90138FFE31D3577C6AAE60D768970FAAB682CD0DCA3E9A9A68
6393E4B772691C1013ADFFC90C508D51B02D2518ADCC7E79F7DE5DF9D18B8435
6129064DD1A3995E5A6F45D78287CC10A0EAFBF47223494C5EA934B1BC2F7C53
686C5880303F9E3ADC8B100D441D944686E1FD811C646C6DD0224F6CF55FA87F
D132EF50450879A25242A18683BD6D0266F8F333F3768D1952B0F32AA75106D8
EC0AB703F287E847CB91FFB88CD9DA174B49171822BDE34621CF41EA772230A6
3088F8D19CF2364A329162D39E166AC72DAE70694813F3AD7DD659860786A55A
2972D906C53B7C1E8E313E47E1BE98B4E000FCD9F32B061E78C54C7193B6DFAB
299EAB77CC0E355836A7758AD0E80735F683B944920DD3016CB710B5E3B641D3
1F7E7EB6C7C34769FC0C6B420F60395AD659378024307FF959945AEAE001BAD8
99F3DB2C5F028F21F5474DA5BB8B28C9F320231F4BC5C92E35C88262C17C5EE1
9EA126BA545F9F567973AED72209208127F1FC35DB9C53FF58F8FFCD65431928
2A4C35612236B766F7844A77BAEC8713AE67FC19995DFA5D8982F62E61D7DF90
76D39B75B9626ADC21E7F8974DE505CE4B20030046B5DE9D2B50AC35F06605E6
9E9EE96E192356A96D462C8614F9050DD0D77E5AB4B1F27434A7E5C79A7CAC50
7EBB1EFDD0C74C1971B560447D0379BA9C2B60A898139E68964D95E83A32D579
D4B6B3D7E390A6297EA5CB2772DB7D5B3A765DB9FCD75A8AAB1B65544221BDE2
A83051E874CD270765CC8EEC40DDC3E71ADA0D7525213A392EB56E9BAFF93561
0D9E8BB0DF4AD770C084D247B8AC2DD2BE7B914FC3609639730D88C215F1A998
D9BFAF39DD5F69E22B3B0733EAAD7AC38AF8B367B7AAF3E161CD076FFCDB947B
D88F86F562E3BE1BEEBF9D23E77A344771D2A78432C7E7508CAAE1BEB6291A5A
CA0FB4E7B1DA636CD73DED21F2997F7F15B108A81683399EA379DDFB1A5E2816
64A475B9DA89FF0E90A4DDAA77C283311FE6662AB86235328EBC11F2B933C4A9
EF4B613C0024A5C8F25DBFA634F3FF7824578B6964B2B5345FBB00EE2843757F
7F207ED8BDEF48B214547B0C80CE94378770175BF365E63A33DB56593E3FBC74
756A8FBDE757663C1C00029B2C207534233CC7BCB84141DACE006E182B4146C5
C4E053B5D77D2C1633286B7B8A18BAA128DB420FB1EDD69FA50C105FC4AB6B8B
D478F02914C3B2AE7E4C08A5F1AD098EDC11B0C01C3C8272435A4AF3FD6733CC
CB7304D2C96106D33513458E6CEA55756FBA98CC0CF5396313E2D170CE242FD3
7D3670C90C6CA30CBD80FBDBE525301A7B04800D074A99F15C4A26BDD75A89B5
FB511B1646EA756D6119C92BDCE4B669193E3A1C3C0957BEFFE02B0A64D2DD9B
14FC311BF28013D443D568DD03C738C564FA69E56E3CD308292C474DC15885BE
A2FAF2155F358D0C777510E9BFB0DBAA0AD15952AA61A0CF7A7201968224C50A
9A83125271502F8DBA3FA0FC5B70D3DB01A6BF4BEEA50F9AB864CFC6DF571341
7DF7B4B287FDA1D36FBD7F8D3F22ACCB792CFC9667B46574595E7CEB2A9F219B
0648F139E579E63EF6A266B413D558A52ED7751D6DF28167F7BC0B7C2C8FF746
F63661F9778BBF521945A2F4B994D57F4701BD6CABC11840977CA10BC28C6BC6
7D6BA7DD4837EC06AD7FE7F85E7907917BF59EA95102EE26A58C403813CFAD11
FC54A524D52C7AFC9B8FB911E7B7E02031A81744B5517257325C8089D3415AF6
58928E231D812957B4A2549E2279824BF3A9FBF62C7D7D719F916240DA6E4FF1
12ABC551DE3A3AD1F4B880B453DA1EBBB7F7E2C4AE6BF4A15B09AD2D63FCEC2F
B1FE15E891AA35D43A36CAEA11BB130B6780B36D9391B5332D8B2729395D7177
B842B5F0556A5C64388646EA57E4C0C49B12B9A3892FB49A86F501A908D6DE2F
B5D365040461BAE67A549B42F8CA69C81442235C3F8EF086F4230E725CE17276
B6091B95B404E37EE40F0B6722F645E5A3021E8975B9C6794F64D37160919745
FE20F26F8947884D060D4F92CD55B2206C3ADFEABCF83A88E1AE45221439D9EC
EE93AACF27AEB98FFAF2257B39984B965A1F1DCEBE1FAF2B85938AF4A580C7A2
86C9F6DF661CAC11C4E011ABA238B0BEEB2E50B4A7A5654D3FC09E874D4EA72D
125A36969909DE4CCB37A55E41681A89DBFB2B7C07EDDF05649051BBC3197F53
23E74C8225C786E04D8BD7A77AA9C78DAB565414E606BF5AA3B3F16BBAA03ADD
EF3CCCE16D55C7DDBB88C8B13C2BC4D8CA2C7886E5B7A5CC47A883CB8145943D
9A3B7456D5EC39285FBBE888D33CD9C0C04C8895BB6EFE9FED3F11759EF51478
59E614E20024D9AC8050C02E450B8292396C1901A83206EB69240E14AEAE12F5
AF9937BCFFA0C3292FD865F74A3D845BA43B5D25F0C00F03209CF9523787484A
CEB5706FBDFBBDD9F486324306D2E5E0360CFE7EE642634ACC90194C699F56D6
F2A64A3075C09CF9494F72E41063AE7937CE8CC0019338C842FC81D1FBD8E2E6
3E76630307B6C52A9A675790015F128E05EEC2E5D34CBE343D9CA0AD061D2FFF
BFBE3DFE8B3F1AF9AFC2E579084DD2EEC13B6DA3D73B589855
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D491A1FDD60F7230D5D725D21F531072155D5CA
12045C71F375116E93825D964FE24E272B239E8E12DB85368F11963CBB4E2B4B
EA559F6A1FED7DDAE902017290E4549337A9F6CC3109F1F858213AF70573323B
78B9F56D9A2D6E6BD0FB038E6B0AEB661D95D1669D49D7E93A21C76C8E0B29CA
73D10BB805BC9D2D488FB292E1D014B47ED472B3DD4819A2CB3E370EEE819BCD
8C722A1D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 102 /f put
dup 111 /o put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF728D2A654E52B6A6C90A3A
725F86627D7C3EC5AF5AC512976D35FE42AACA3FECB401788D0BFFD9F4743BB2
EC5B4E7891F216DCA5A69E917A171E0069A03FB214ED307DE947225049D46E0C
4707503F09811A597A9113921AAC23AB1CAA9866F81A02BDF349FAB129F23E86
E384C043053055938D42ACBF9F0EE86CEBEB011BD5BB7D5930759026189A89A9
B624BC5B352DAD55CFCB8BE6CF6F215CCF778E33BBE1B009AF1164AEF12E6291
751E80E442EE754DCDD30B4729E5749A10ED77A8A7E72E7071068AF6FEEE0CD1
7EAAE094DE6585F8857A0788F95B2A7F9D317AF50BA67B0A0666A6B16C65DDF6
BFF569768E21EFA3665A8C536B540D601EF52E6C3A4C91C98E4BD999CB4EF2A9
AAF3142A52E8115AA3F30BAFBA17B1EAD3337BC29B9A3FE6882552504A9B4029
6EC2C2F0881E74658B9A154A3C71EC12D6138FD188015E520D347FFA17EBFE28
D76D4EDC210B369CA109AB0E8C108A7FE15EEF3923B3288D79FFA262C3827C1E
733915BB930632E25FD56EE048F77D62B3EF58D87D55E97B15C5354890AEC52D
74BB6747FB2043F6E71A3FBBA2E82BCDCC4FBC234F97F7DBFA58EC90AE70DDE9
EC58D79B3844A7ED10D6BEB5957ABD1DF67541D652AE0B652274F82FAC5FCFA0
54734385F5D98C57B8F201A60D55C7D0E8A1F2DF88E70DD459E792FD27CD1E46
F811ACF6AAAFC16DF17A2A2A7895959B53E4251FD9074A805BF8A6D09E28FD55
EA61E20C5F34CF58C3BCA526B1468D22122274488EDEF5F17DE9CF16D9FE0126
790982DDF73749161CA6EA0604DA0F0C2DC30426E6AB3E4BCE364839990A2272
EC636E31
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 72 /H put
dup 83 /S put
dup 103 /g put
dup 118 /v put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C1427090573E1BC8D29A217CCEC
0D2F8D66342CE482C82696E65DF25A9A0D5E8197CF92E39923627C5E37F1402A
7A70057E5D99A55B6543C2AF2CDFA246607D663DFBDC0645DBF828418D0EC8AB
2AB23D24CF8CE07666B85AA2C769DA4EDD9D45B643CF704F17BDC1FA8D6B8D4F
A4A4E2AB54281F034D54A56E887E7148919C68465142A2C0380A50519CEC6E1E
C232D79B3ACA07A34CCA87A8722EB0F03839DCF6BD522AA4AD73D4DD656B5C08
2E03BA4D824E7B833E89963FB3DE11F7DFF7D47C96C4722899060FC8F91F28A8
BB64EF2EA43D7C1FA208EF44EB316981B1C6F09AC718F307E80B29885BD8B971
C8670EB65678666485E1467125B7EB3C9EEF561001051A26F3196C46C01A924B
B9615DBB6786DF6522B4AFF4D46E8B522B3BB66A51D65D864AA64B5B352D3055
53A14C5952655D1239A7FD2CC98708E04A5AB714B111D8A8FE84DB4AF36B6E54
543B4114855461C83881CDF494C2B0F8337558AA398E37BF984F934C66986C2E
E9A510A1B003193A926B6C6555E53868C6384CFDCEC2B611612068841D7ED60D
954F44AB46FF87C7C9FC68AAC0AC1BB0C02E9F97305FC7E43A31E0002A2F803A
30B1246AA8BB79B50B784FD9239EEB2738821A8489436ADCE04E4BD9FE414721
789A755AF4B6CDC2165E496FF067AB191731457361624E0EDDB585990593F20A
35CD79B1F48EC20E101CA02835A2E519A1C45A14C3DABB8AA4C7012428ECD18D
DA85175E3CE67FD4A6528AC531C5E3B553E8D513719B4467FF2EBB5C74893583
6256FF96F06EA28A98D40DFF9A4EB09326163E0BE25C5DAD89BA80630FFE3EBA
D70FD8F2302B44FA2589DEC1BC21D9C251BDF71BAD45A7796DC14E05E21ABCA2
EDB4D2014548B232CF00A760D92BF4B537D15C66B6C0124EE0641A8704FC0B84
621688A431AB0E7409745B1E190166720490A124A76A808841FE81D39359DDCC
10C14CA858E82DA3519174D386845193EBE4AE095D20B8EC24B0F3B41C828B96
A9FEEC29F590EE857A3716A3CFEB9E338EF0D7B0FA721D7D11990750232B6976
B16C6815E977CA50513DA81445E93555250A44B41876C1DB3A6B32B70C9CC4B2
7DA28E97CCA8A8826C4D077412A61DF88B80A1920E6F8E15AF16081174D1360D
F6C41D419D49C3606B11B1F8E386433593D3B05E305FB06C79AAA0BA08EE2198
89FD6A355FDE13630204A8E64D8F940C3755A08337C9812303280228A1E6E048
CC39F01870334AB57D15D6C78153E9C5533E181B368CA08340FCF87EFFEFD7F2
5BD5978E7557824AAD36B6349FADA6AAF58665A2B2A2399C57BE1BA0D45CDD15
1E01EA0DF9C0C1779D733F531FF661381DC983DE2858E791FA3DA1235728AF91
56CBD143BA262279BFFF61E504C5F271499C8D6F9BBF0D8560B43A388E4E1DC5
1A850EB4EAA1C995B7D1A07FF0F73B0283C8843E9A3001B8035D47B5B0A3725E
C5101252F708A3F3B5CFACD77854B2D3841A0B5BE40198A48B0D8111B2390B73
2BE37097CBE06ED4FB2DB4DE8538D251F549E17DA60269C98CBBE4D957868EFB
C7415D00225EAF9E73238B3E60BD46B92CDE3C520683C6A67FD34906ACB4DE8E
677E734CCD17115D79B7A959302EB4096C31E69F0791C59A46D76A66532D02F3
8C23B8A26E25E4B3BAF63872327590FAC03EFB2384DEFE3300663341DB250481
E658D9CBF57B650581E5A7AB0DE11142BC67B576174415AD87A31EA75F725249
C5FD6F6372A358C5521B2967CF18D8D7C4C51D0CA8DACA3391992D50A45EEBBF
7786BD31EDC857EC5D67C23E1E5BE27B0A953F7EAFE0D8CB44C88CF02D24DC0E
EA74765839563735AE8A7F7C110DFFBDF1E480B4EAA9DC0F421833933A9D7CB0
A20B710E2FD27994069F2780F458C3E052257AEE0FE3F9A2EF1C34E8C0A6A759
159B8649579A3F4BF071A697A62652611F2879561838CF261CEEAA5B7FB3D2E4
EBA39FE9DBF7E6E5F787E702FDAE99694A25D69C9FB9B9BB4E173D88AFE4C774
1C79A6A1202C385A52D5598F02FBC4347EB21A61D32C783A547FB386047A5E9B
3C6CEB41D7C00E2BC3CBFDF363A0BE90246C4B58CD1C620102ED729FE7CFA2F1
7505C2629F9E4607233DFBE03EED344B590B95F52D6856FFF1740378B96A920D
460CA29209753C5AD15694FF719098A8326E5E499BAA1D75D310E248EF45D906
B98FE0D1BDDA0D5C1D9835B85265438B7123E7E742671A62B0968FA3CA8B5CBA
3A961681503B7285FE85CF4E8602FB6DDC5E135B1C181C46B5163DE8E89501B4
E931C4C023D639DEB529180A1277B877DA51C042C49464C530465491DA869EFC
AEFD4ACA15E7CE19E1D1AFCE2C34CE8BF520707F7E7C92AEC5B4424BADD4FE70
9DAC41567A41F90D5ED6197E8EC2AAAE86F5CDA186CD4A5CE7F4EE7B3D07D063
A624A1ACFDB2F357D97627D7580C6DB30A0B7300F9119EADFAF85A6535FFC620
951E211949774F0AB32071EB01F284AFBBCB7E291D3C0D1281C9F7CBB0B082BD
60887425247E111A2AAE290A2F3500768EC5F2039270BC5EA3C222E8D20F4F59
6185D0D52DD944C8624508D5E4E2CF4362523CC6F052B5BFD560CECC48314F33
E58C8B9977344B1424E2EF9BA41C1B415BD7C2CFB29E989BF7AAB462774B2CC2
AFA115AFD78A7997F57BC4E9E64F6ED14DBF2195F30E3E461F6E1110E4C5F036
9C00B27F991477A5E14E06AA7A6ECC48E172B2A7B14F78BFBEBADBE9DF6203F6
8992C540D1F5425D280CD30B060D866FA2F9AB0682BFB32CE85656B080F0F8CA
11B0CDD60C5C378688798CE4A5CB883764B825DC09C6C81245F81E5F22221FB5
5E84FA618B0A73CD72498CA7E4640C39490F43553C1D32DB5E4ECD63099BF61B
CB4CD652771E96C2B2A3F07245D2CA1DFB70CF3CBC6CCA1752015D12C8795768
4E0BBA3A5FEC36F44BD34F0ECAC30465F86E66FD81E8AE0A67F9306D4E532388
AF6A71236A43D06D6191EBB450D2B41250A47D9848B095246FDF709A38DD63E5
B2A1396377A17B165A0D66E2796506F7ECE33533C4FAD77C9AACE97FD0E5C905
BD0802F0022D57D86C2FCEF614D4D707C0B16E3293664B21215CC4571FE40072
49FF17FF7C5C8FDF612CFFB214C4431A573614C54E6B4550B04E4B18FD2AB86D
95AA987375FCC1EECB9FF3A798AB3CE0D7CCD1A973BF297F4B2E309E30B2D5D2
10E9540D803978E21C84FD1A66D0C19DA51FF0428669C9EF5BC1517666BB32CB
CD49842443B4FEA4FD988E5FF0DA0D6A4F6EA7A4998DD7C35B63EF5778FF238C
42A80AB9FF3E63762865CA1C899CB6A520AB91140EA143A2DFBBC9F7905B4E46
8E6D3F78893536F3680271CA00E15A7B99A12131747C47C7A56FB146C934D3C5
3203B15B6A00971AF13E4003CD3320A88014E24CE63C35E5261C6E4CABBDE97C
475031DE46578066ECD00D0EEA8BDF180D9E692C80991D9CADB0BE2C40EC578B
2C376BB3E463062802A6DC099BF0F44C88E1DA330B0CAAA6CCDEB5C2FD7BB841
2F216F53763B22F8BA52B26B125A5E5AD830A4BAA28FA6A9E272AE945455B53D
1DCC5CF5F5C08A53A376839D133DAFD6FE2830D2C391D360832B62AD7ED95CAB
A5670EB05312EB27667EE0CA93CDE42DD9B769EAB407162119B11789F887CC6D
C073CBBFB32CBE3D68A18BCADB82B0A479A2BA1CC2FA0A4CA8CC6DD537567B3A
0755678521E87DF58DDE8B40466FC1311030EB304AB14B284FB4057494EE2CB6
4869B9F4ED56C6C5CF0B0D7B3852BAE42CBCC1710732623B8E072737495F9F1D
C459429D2B0F1CE627E9556A757A82B9E15184BCB6A91F89333C2E447538B2E8
7FCD7445E5E81C67CA9951D333249E8B012A3A87CF406119FD10F3D23F9FC552
2EDDDC2EF92C99CD87C133CDFC4A3CC4E35938058D2ACACED362A222AF59B260
5ABF9996F5129795C6605031886746D63140CAEBC3C4873FACE705C93E54855E
089E918DC794AB7041477B4914892185A4828B619AEAE261A37C77E09057404D
6648366944DDAD1A432B8101464ADF65C9640ACC5256972B8E218A3CF9BCC0B4
C20EADE33070D56FC08E8C6252D10BEF2D807648B5F02CAECC8DB243716B67E4
01BE410B0FEDF19FF19E9CE463EDD0BEA5234CD9C185C7382535A7BB986F7856
1D7D94C30BBD0DC7821C5D8D8AA97EB90A8519080971D07272B6E2A2411F6A18
B50F56DA2708C5B507FF6952B7A1AFD9B46F2A256A0E9DEA42518843706F6397
95C9402DA6FE06F8FD2CEFE7187EE1070E840C21FC8D2060C60192FCE1A2C116
43195BD5E0EB342EAB7E9D107E03A2BEE568E8030A740E1A947D7E7905FFFF75
9173384F8FDC2EADDAD5856C6191FFA38D4807ED4AA61121883A805FFEA7C63B
CE122235C360D6967D4A4C0348137361CD4A650D8BA8C5B80E228A289BB78178
BFB8ED2549706AD48B7F91931F1B85CCBC7E2681D1D21E84DBB1E36D891FA3ED
DB710564783B2A4E0EB7EE64E91CCA4D676405EB29B4DDEC7668C60B41077D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 83 /S put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 113 /q put
dup 114 /r put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AAE0FFD5C119D11E5D13743E28D843B0F2EE315A2ED05A510CE53A2D06A7
0C076D4B6BC2B6A928553E7F0FD472760167DB486A777259FA74245EE37D0125
47314DEE4B29E5D22180BDB1BDA7D33406FD340DC3991F50800BDC90F7678EF1
1064986DDA53A77FBE2EDD38E20C41EF86CD50E8EC167344A3F3B3C3BD83CD80
87BE64CAB702F34F5A57A13C9F47B5B83686AF45E8C19BF823F2C642F99B5241
69BCDA0274E62FED8E5F74F53EDB7EB22FA117EB150561E4EBC8778584CB7568
887A50545592B454D8C965DFE777DDBAAAE71EC6B413C8F13DE8D9AE6334B1DA
86B084A33913A099467E951290AC70CC5EE50DEEB9F9CF5E29C24EAE5D540795
E0C88FF6F0EBFAC53BA5AC4666D9F4A7567A71DF35E9F0F71444396766FD24CA
2C8EDC5A2A00DFEAFB256D580B8458B1341DEF2608DC75C4DDA94AECAA3E07B2
FEB0F755AF907E7908B84E43218961BF3560A0B7F02D515EEA9980C0A232CBB8
CBC921E3B459906ADF280D15972FFC1C2A26DD70ED2B9427D0C0AA48FE30F34B
03D7D32C0F1AE811CF0C154A42A5273DB320F645BCF491C6C9486E46C2811303
B8AF6D64FD17A837FE48114672CD05338FCD56D027C3D9A2D20CDC89F2650DA1
C9B44EDFE57ACDF0CE8EB6CC99B0953A98326A173A853F19A15913BF22CA277B
0AD68190BC84551F44331FAF17D8D9F684513A9F7928D9BA455310C884CAB1F9
9543F099BD9ECFF7D20D5724EE415C47D3E2A01ABE42A0A6EB7876CB1F413A84
968977A3064F552B3C90020F5CB7076F3F8D829D9D6FB26E71586C1BC6877721
D7C0E33284C4EF5CD4AF1DB578E6B51DD9E3F406E4B117A3F657C407EE3E04EF
9A1CEA5A9C520D850E874A6A4E4365D9B8BB66662FD75CCA521DB76E13197D85
7A3BDC4CD1599C7F5B0C71067BC38DAA836E5942A70C149BA9D6786A7BDE5109
6C3E11C0F07E3BA6417C980A78819017C8FBDFC0A521CA3804303A786644C649
E673138EDD485990171DC26DEE1DC1A949F506DF0B8D2DBCC5FC5E3923EFBFB2
A3825821E015471D499E4517A6A99F721DC57F911C9895B35BFE11158C73A61F
B8A0B84AB8868270A1B33D6735A78F9816BC92C42BDBF1C8E39E27B7195BFF0A
A7EC23E868D343118136A06E5D7A25F2074F79A4016336D27F697DA82610C171
9077036C8D162FAB8D553CA6B8221DB23AAB832893656CCE8295071F951BE8F1
D6E4CA74CD21683FF84470CE6674486DDB226274A6D2969B8DDC5CA77D060FBF
48436A1BBEAB23476D1E2895DAB86949DE5EC9C0ED8A87C0C4E426AFA7014BD4
EDAA7B4494858EE8FD2F71EB1CBA3DB595A4A7273FDFBD824E5D13A677864D08
5D29245DFE45E678F7163B404CAAE7F0AE6ADAF3FA527340CBC2B3E97D278A21
B776CFCA44563E207AACE7CCBCE423F57DF6B9980F31F2B821B552556AB9FF41
D028FD27E3799C93E6593AF13214C9E1A88729BBB7393496200CF4E7C52D3B5E
06E84436451FEB99DD769AA4B1768615EC1FFAF9740A6808704ACB62EECBEA73
BD27887A861A99340706833D4C0960939E5FD2276807420F414A0F0D0A31CE11
AFC868A8DB4D0F274488C170DA9C6CB70CC66D870BCC0B91842D29D0F7743926
03FC65EE2B9D7973FD263C1D93D653B016C156EEA06CCB36F365837BE5E31A7C
A6B8BB0BAFB0B48DE4990E28057408B34E858FF388A8E6CA78AFA3798AB3E5A8
7EB3D8DD82E6AE9B37B591BD5D64766F3CA887B68EACFC7ADD4823E1166FD1DD
F4B8C4B3FC3E6DB8D48D87926FC2CFAD6DB5B0E929F6C666469872BB9AE0C27E
46AD92C420A36C58878AB8B313F86F22CA4365DF424AF35D27D200325C12F403
72A2A06AF7CDB1CAA5BA3D11006B763ED02A8B2C830393EE8AEC3E50D4D00991
A43C0BCFD5CB4C54F6AF428F67F7AD93AB6E4966A493831EB1D4EE0B312E9CBF
A7B747D525A0506B751CD4E1D809188822DA33EECD45BD1969389EA1C32499D1
E1DDD425E200F77815C02E227EED686F598FCEE9CD22886811C3F811AF01A749
7DF157E6936FB0AFC41E3FEFC978CCB01D56238A4CB53C08CE58B01542DB5D7F
F797A9929AD1D8885736630A99DC3B6CC00D85DCD53A651DAECE8EB33B6405C2
22B593B928C1A8E246040B2628F48C81F5D524FE61ED67FFCD86E7DCF096AC0C
37A3C08F695632A8D1D1BD10E7BBB35528D550D05682780FABC69E2220E9AD90
07AEB09E867A04F3DAC11FC9ECD30EAD527DFA64C2BAE02B09FEA97C6DB7A441
784AC73B7374EB391498FDF6B55E5B1B11602B07C463C6A0796F04F1C7B16262
776177445CBEED0366DD42D6337E317C20778F1ED0E3BAFF77375FBD1CFF9171
63654D3EFDA0AB60CEE44348E1C6C2180352F23E8C925F1A6B051521A14798F2
64060C23F7EC0DECAD07B5AA79A0611BCEEA635D411EE1CAA95D4A09FC3EC1D9
0D90843A8D3F8CF262C87679D9895D57A5AE3E524F21EB05BD032E270879602D
86519A9A42FB03766CE70B2942AB2C13A89C709ED07576111A58CB64439AB9CC
296061C1FF4BD277025ABE54D51D857B969D515B9723C9083BBA206590CF7BC5
AF5AAD12ECB0DAF8F90E46694C0D24DEDE8CED4308903FCC5CFF2750DEF176E2
9D8D17C56BD90E5D14B07E93A9E16BC526807F710FA70964AD26BA15EB0DE329
973FFFB061FB120103A22D394BF39F7AC5F10B0E22820889A54F5EEC77E8B28C
41D1D60E91F52C35AC0ADB6CE1C817268D3BDF06AF66794060D3D574FCF980DD
A9659670DF4F08546DA68529A1533FCD305C897A7E17CB2F632782C86062CCA0
AA423E7516250DC3AC696162103733916D18E08F723D7215309D6519879A7D69
CBB880735B81EEBC410F72C78A9EAD91837F31597BC3513814940A88E9C9AAAD
6E4CFFAC6725
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 101 /e put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DB0D9D5F76C5C5A730FED59C1D9DF5D5FBAEF7A48A4C36D6963515A43C
743589C85EFAE287122D75543C4D2C674D32CE2A8238E7F314A0A2B1B15A1041
4D7E4D147018A1553C220030BB6D71ACFBBAF5EFA5C841ABA6FC1D4F23621571
465534BA437A6941388CE2B6425F3CDEA40929A86AB97EA452BF32220EF9C5EC
F43FD0476DED372BB4DD83B1610E843AA6D9E4B7582ACDCB5B240E9258FF10C7
B62707743E9186804FEA1B125E0AA2BFFD3397AAB69B5639BBA2B827CCF9AAB6
4E62339CE57F6C36B776C2B4D0C9AF9A7FF32386FF329DCB96EFE89478211C26
6C662FE0D041D97CB7BA4799619FBC330357E209BC5270D00EED6AD008AAC360
28C135B1D4F7D8E8A788C21CC5438C90B5503E5E035B18912F9F810DC717367B
62D5E822AD26840CB65684ABED48623660EC3802C5DFAF14A6E966EA188A7326
360A4C572C5777E3BB97DE06C4C4528C8F14C8F32B2E3B402676783C88B4E57D
3ED09856E1A8D7CBF27D39D0C762D5A81F273AB791FCC4C45B4ED1C138CC2A93
4B2D4A18D956B74FC9EB8F89C4D07CD5D6BCE38C3E78AF2B4BE46289A7956577
40D935F036A32C9D3601930F2148280AFD66B53A8785825A54CFCA5BBE96B39E
A2E1D4473C96A2A239F3A907F690D9321725D0314791D15C25A5E519AD8F736A
3CB573A6D04E399A1E1BFF185DDC7AB69A83CD16B0EAE1D394A6548B22D62349
F8E7A4C8819061115DCC25B45BA64C506F5B4B0113100A056AFF5690096AA9B5
C934BD4B08E09616D05374843CCFBC99B3093F2B122E1340E844C71B11585939
77E8BE52768C84EAD3F7694B49D04EBC0F1106F688DBB1E769416BBA295527D6
D2623A97C08CA0B59A8A7F167F127193501D23284E0DE1E0E8701B35C2B292EC
C1BEC94785019927A7FAB7D1E14110E3EB233A4D317CAF63AE0B22806338D873
8C7F39A628B8771C367C811F45E33576EEF35A66CE6F55D45A41A24E952F1D22
C900B0A94ACCE39EED05FD75C8031745095D269F2B5A3019F3F9B23256A6E9FC
1755146BEB835BDEAC4BC6C998D625E30978F59C1358EFE3EFC26AB0EA07BDF4
28C60326FBFDD3353CCB596060CF5778EBBD462218E4B515095D52CD67910145
C619A726
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 19 /acute put
dup 34 /quotedblright put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 89 /Y put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
dup 127 /dieresis put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD47EE10B9AECC871B76227228CA161EA7B61DABB252EF91E607AC8D3F85774
DF0B1507B60BF52E4E9BC0FD04400A548D553D4A6EDB247875E0A2E013685C51
D23EE8A56AF57025AD67D929CE8BE791BE91A4C4D9F00DB8B4F16252C04F7BC2
02236296A9052306639F4672E90E3B9DDE466EAC17E200523B2AECD6C05A0A83
66D4EBC86C0DF27B789D5597FE88BCDAD2925CFF60F5A8EA618FE867857D585A
CE25A158AED63B8FE391030C518692F2EF74DC514FD192BCC93C02373CE75137
334A9C960EFF02B687E7B8F18FE2D9EAD2EBBEA3A459D8476AF51AF6C85E1166
08A0A6190D8FA8252F45308BAE99AE06106D17D094F30A118BF2E1793493E78E
0522D0674DB2E14706F9E915C94E1F6015F4F10DF67F332CC8449D84C6B23F4A
0921DDBE0FFCD912E6CCA5E6E543778DA90289398BD3EB1798CB9C7C2E4CD058
5CCC85FE8AD224F49EFAB7997436CF1E50ABF9DCD672F863A1C21385F8462D0C
DA1D4C5B92B8B7DD4B8C7DBE9B8A3B7D17770EE6C2B2D06BF3EC19CD5460853C
D3464A7110B8AF9A3FFE6A603B124418AA14FAEC2921BAFBD868EE27C46A4257
00C00130F2D69391D2BD404A4480E1001BDA417D0A9BB54B94761EC4BBBDD577
BA7D9D484D29FC5BAF59246D434E0BBC0236D76B6873311EC95AEA7C3DDD921B
7DA0ABA0075671FB546079E5038E74DD52223275F5E4E8D52513E0FB5884DD44
FBC4D72182BF36E33D367DD92CF9497C694234B5A7E8574975AA3AF22E7E2239
69EE9ADE30F87B297DC8D8E0B8CA131C96E476A2EBE3E12FC076C29C5A50D99B
CBC219F7E2BFEFA8529769A58BD05A640DCB254F6A3F298DC31C75718AEC4E5E
5010A9AC9E6C092A61E8CD90848F87A0B559E5E99DF95BBF25152B64DA989117
6D3B7F9DBB97E726868E053310A838AF96BB60D2E7F2D38638933EB24A0D7514
BA44AD3C82411FFA231365AAD649D0145DD9CA07D304CA6867773A26E0E9499D
004327550465FF19D848F29DE5CE8D1283433E06A66A614AB6921A8B3F6151C0
0F5820A98BC071051B050E42907D7CFDBB4863C5BA10846258D2A7F712E6BFEB
57C7FAAF3A9121D8EF4BCF302FF382B6857D1CFFF2597403FF6F5B68134137E1
D731107625F675DF59C69899FBA18BB00E054E3FD85FCFF454CC37CF18CABD2C
072CB22DCC348E979EA635745A7B5AB069578EAB9F60864DF886BE2C21FF7B14
A34C5386336D340C2E3221D1018F2CDC9D15B24705D054BE3526FB959D284AB2
8D79B685BEFC96EADFF74B540EB20C52722A7FAC52BA1B67655A9E5A8D76F3F9
A647717622CD9A731934F6A28004AD503C55EFE979EB1B9EC837E736552D9EBB
09751069D552A8CCF9563D93325C3C0B1982B8196DE743F27AB51FE9F6BE93AB
87ACEDBBD08CF5D15C82AFD7984CC5F97A088EF849F2125F14E5AD59BD77D51A
C9664F15A392577AF2D5AE249349335D2635152F22C2008C24ABB67250F61078
2CA233699840508D990B35F42964E5C4F93CA28118F63423B0CB927D3A9C3FD4
2AC72022A2DC92A1F670DF031E3A06C8103D8E1F39D2A4FE87BA3AAF29D8A98B
319356B89DAA2406DE485ACD3D9012255AFD2E597666D50922FE5E4DEA9565A3
2FB358C7564B9E411F24F8D173D77DD3057CA239C0FD3279A74B554052800F5D
197161A3060D4090810DCE50FA7D7E459E518FEA9641FDA732FC2C875A38B46D
1D3C1877F2B103CE4A743DE63B7A83951FD56B2178A964077465974FEAC105EF
B4AF5C5B5396B5873AB2E3E720600E093D0EB275A468E3ED96936EC7D0A23242
8FD3C5E2FA8CBC0D9D6BD8EFD28F01749251D19593A545C5BB78E8117A359A94
A2B6800F465178A5B37E8C13363ACD5D3F1DC70476150BE24779859100444F37
8BF04276B8B8D9DBD5C755E37A6CD0378B2E62046524F6E07DAEDAA15D15F43E
D0CE64AF9140B0B6462A4F692EFBC066404E6502AA5F701B6F80BBCD3BFEE0FB
38E9CC7842C54DFC11FBE7B63053E085C4A2C12A882D86865F9675AAD4A6C7C5
C1EA54D20C8A3EC7294EE8D0F0F541C7F2F0AB5DBF90B1309C2E843550A83165
055673759E70A3C47D61817E1AE25B48593A1D2A0A51A3EF92F4A2B99065B13F
A08E8306BD71B34CD1AA1173ED95A850AB401484A2A2C6A4D8D8172E5E1F48C5
E921C8A56E8D33B33C1B190681544000DFC778CE7FCF0AA341A986EE7C1B243B
B8CC43ACF64C7AEE56EC3C500AE7BBE3A3E17A2C08B3A50CD20F678F2AEC5EB4
9DEDCC66F97DCB48C304F690143008FCC7D886712FD796E5231E496914D0CF16
137CBF17C29DB5FCA763F353B232A51CE5543DB1477F8F2F9A96DD65F8F650BD
923DCB1573C4EF725169A25E4972411B4F71945838268476091FC4301BBFBC1E
F333DC5B6BFBB685D9BB543EC0FA46347ABDDF98591D1EC89EFA30E9FC7FCFF1
5F02AF0523849297A85DF0DE6E8FC8D8A869BBF0865AED819BB80E09ABC06BE1
C800B79AE279B88303AA789B638141580557E4AC05E1E11C9506B26360973DB4
F0B5816DE63D54E96C9E128B4192782402D4F733BD4F8CD155710B4D80FB406A
69DCFF995C3DCF6F87E50C2D1ED88C09C8CF0B8B5B270F70F1F14B9E891097A1
7FD4E3A8F907449BE0BDA574A784EBEC6B33E106510E47EA3EEF5C651C4C35FE
DA4D78B1D1D6D891F633A40793CBFA889A02D0A46108298691DD35DFF2A29E4A
4D538EE61E1326EBEEE4821ED0BD735AF3E0F449C0AA1849B4C206AD9411C12A
CC1FCE646877C0142FAE86091CB69AC5F857438DEB07F64FBD965E3B69A05074
39C4C131A502B862151E8B125EBF20E0494BE79CEAC428839679AAF6E95DF90C
C23B487D8B85EDF765DAE0048C047CA55C5113702842C525B5CA272298705CBB
3DC4C2784CF799A781E29438C2BA1174085FED26DD9DD4DA4244082A768B6379
83E1EAD2BBCEAEAB14B8A6B57AB91EFD65F67FDEE22B95ECCF029A6B1812D6EC
7001606AE29E248658CC1B9CD50D6ACDFC4F3BA530A783E8AE6A1C77A4A4990E
64EC1227D4F4870623569DD0C80EFF246A92B13C488955E9057402E04A435AC9
A6BFA3A9995B4474D42A58A3138C4599586AD1BED598305285EF7D191A617822
DB430E34DA398A6C641FAC7CE6EA0BA1B3277FFF8F101A86D098109823C1F99B
CF5E9A94CE6C5BCD8E70527EFE9C11BAEAB87EC75286F5BFBDA82C141404FC1F
6408095DD8A2870BC076ECF4ECFA2853E5FA7BD6E7E34FE507743F63320B0BA2
1CD0E5C8220B8E59CBD10923852E3BBE44D3151B1956228FCEAA769D5D843B49
6228A4E958A766CDEE7C4C83885392AB5D07F9016196F8D296B83CDB5D8F90E6
5482BB1234491D3095C6E9EB9485457058CD9393F1341990A46DC70F09F459D8
0A01E56A468B85A6724BC9171F5F0FE11B5AD911080D69431F33EDAAFDF1842E
CBACD84F36B122FDDCF7E1E1A36E82BCB1A306C628216C57CE07565E1D18019C
9574414E8711579B933D87771EE2E86477A4B86B787A60401F63F39741535C13
7303BBD5931006B71B310A965695926B16C6C5EA07376AED40DBA265A439FB82
FAD32809C275B756114913862A9C7EC0AFC401225D40B62AA61850CE66C6AF83
1EEE827236FCD6C8AD47EEB2AB62638CDAE87F3D02611AF38F906F8E05FC347C
6E28F8E732D208E548FBB4C0EC09A11A8A29A0FAD468036A771B7E01E6FB636B
A9CD4FB80FB5A8030CA23996ED6156CD626BE7A31B6B98F5116BE29022344735
1CDEB520F154B02E746E24007558A2E0D59DF8A18F315165E1305878A9F52AC0
0C2446DCB9744C8E8D62F4135327CEA28301927E3768395CBE38A69292265C00
4F195ECE8658390BCF38AB66D5FC2FDA5AF676958D8D87A2615ED0401F70AC1B
189C861ADA544CDFCBE64D53A11EF522B8FC0E38C49770AE23986F65FB91E77D
44C2F3B2D17F182B29B0323273E4375FE7E78F247DC77468DD0799F300E71A5B
6AF6544152B087D6AB83C38C055E79BD2E73318E9B059C7585E0ED8013E469B6
250222C5CE5651AF7B0D209DD510EB14D83A79ABD230CF148457FAB7DE6FADE0
329BE14B739693F497DDCD176F3DB97A658D0BB9B7CF3C2F1098B051BF2215A7
1CE06DD17451B8FF7556E21A7821AD92DF2866BFEFD5908911E34D4523BF65D5
8CA929D3A3FE862F98EDA468748A1B67B4023BCFAE6F878B7AD956789BBF3D2C
9CBE6406B1BED9B07CBC66037A8134577BD93A236568CBDA1AAA9D353A09F3E5
775B81EA4B151EF6D8DE2E07451587E1228F6A4177AE5C64465850366468A6A9
6538A120254F4811BA2BE972CF34FCE012478317D7B5E61B7C2D94A83FC5CE46
22681331C171A5FDC286D005DE26438259A1AFAA427993D5E4961C51F240301D
EB9B3C9AAA2D5EE22C12512685A011D226064A42DF75DE27634B01CEC9C02948
820219DB7F0AE4BFC1DE3DDCFB4482334EEC0677A343215A55A754F60180CEF8
5BE6E71EEAD00AE228BAD3036F2EB3215F218C525047D8A10A2C5A5C735CDB03
1815E5AE79E934525AE0A6928BAD8A26A33283353983AF2319F16AF7FF561F17
988963678608B7D214C25F7406FE6DC8F4A1EAB242FCD0ECF42FDED6159F7F01
E122FCF880DD81E18E9C5FACE979FEF7D71B8708CA52E9A8A6E998401029C16E
151937F59053CECCE82F23060D8C02BCB44A3E855814690C18EB9EBA5E0165DB
BAD446BADAC987E6FC3D01A93B230540A1970B760883D0A160F03DA2017557B0
7E86D8FD28A9EF8EEB2549EA9A22B84242A658D0FA1B06AAA1A453B2FB875FDC
B19B7AA0C0A1ACFF9B59C9DD1A7B8EA2F249885B1DBAED9D444B15017BD51AA3
525DA4F6A2712F12F852DF43D5EB12F7553385E08525DD1141508808A4713477
E69707C4711EC19944FAA4CC0F19941AC31B86422226DC676298E09698A0BF21
DCFB847B69DEBE1B5457550F0674765C45CD9CBB403670A114E85872D2C6518C
FD136BCD937051EC274CE44B4F7949224F6B176AC9F3E437366E3910C8B7DBAB
95D7C46C19735AB5228159A78B0259AD1787012840017FD430635FAEA313898B
449E212F1381C2E8D0C24F82E3B911C47620E2DDA07EF2ABAD59EC30807B73B7
C666F41AD9EFE0983DB52FE40B6A166261D0A3E777DBE610DDE5C71F20819859
BAFCC0B236B74EB6849D3C2D6F8EB29609D92E37DD5986C63A066DCC6CE5CAA3
6431889492EB0D5D1DD12217BB0F5D9025B8BF28F7A52C26CC542929CAE9B3DB
D17F87F1BEEC7A91285E8527F0EEC2418D4882F7A65C504EC6452F1ADD75129C
C4B08058C6A1919AD99EB9564739BBEF0FCAFD6D1474CAB684EF39E368F4DE33
5D51FE37E3B5E1CB997C89C91F8E6FE92179ECDC23D8B5BBA8EF9616D2A9834F
C94C9AEF932CA2A3AD89C859F432CAE26CFD3338AFAA2B3AD488ED0894DC92DA
08524CC453B488035C049DE49E363BB83D3300EDE6A2A73257FB8A532AEABFC3
DB0B53DB6B961AD103EDEA455DB8232652EFE1EDDF11490315E0D0A6FF7126F5
0B2485FC34F63E50A5B07163416989CBA18C68904848BE6FD8E34D3E07C42A4D
6D85068A3BB403220B3C5BE096B74A5E70FB740580F55E2428FEE37E2DE39479
45EE6F580EC3A8A65E49239F24D6730E6A95177086976EA8F2135B4D2A967315
36317C9FF6C867023074FF376A337F83809FCBABA857A80941EC9C7AFC42A6AB
ED5CEB7F3A0ACCE652FA51A196B411B9FB85FEF21C5D58B2FE7D94424AD506E0
52B3A89AB5CE7431CF7A26012396E898E353F7590807D3A093106D25282C8F68
2DE2FE69E7AF0CF025EB0641DF9D10CA7743188D1FBDC5CABC21A5DB3B6E9518
00B2FD3CE0AD0335191B050C44F096AF1119871CE32E33F958C845E85AD13E08
27FA04B4D977D5EF78C1A7587623EC2C13BF12F3173EDD5C291B50706C393629
1CDB2E27982B575FA0293330A348F45B40F83BEA641E049A6B6A88C28801DB6C
C961A60359BE39F6B43DBE64E10AFEF8CDE992DE650EADAEA87CB17F366FA5CD
85E2DCE63A02FFD4F8D104BDCE0122A089BDF31B311F4282A178E134784A7323
AF70DD74DE3367C783848E4AE4BD057D93F884F829E25B0B757CE85B10C61719
358999776EF96E4BCAAA81C156A190501DDB25F8DBC5E3D4CC07B471B9D6E486
7C36424D26D21CD2AC03359E2F8BCDC403084F43E581183C07E9CB37E31FA6A8
206FD5E9E7C8749A6DC7342C8E05601EFACA90A11757712D357C875AFB43DC86
18E0F816E4AE74117B0A638BF3C2B0984BA867BB183BB5FCA9891AB15FA2048F
9BAF5B7446ADB8A3DD23E942CDE1CE84FD007D7F41AE3511408D4CD51A1604B6
69101406BA855EEABA6ECD3A4BA697A36BBD5C7E51BFDC4D76F14D4717E576A6
998F5E8C17C4CEA5EBC76C946A5D6668A399BAB122F2B1F91AF52ADB2CDF469E
01A12FDCABCA850386F6F6D45096DF43063CB7FAB2AE0C924449B4A25FE5B325
7EE1D97662DDFE460DBEBD74ACD79E46C0774127F5AD6160AC4F645B9BBD959F
E4499ED1DEA8A1CAFECB617BF7FEDF1D8723212E230E7364CFB913CD593D315C
A4E5E639218D089F8F6B7DD01C6FF29914B2670D80F426E0AB636B0C2E5ADEF9
9E22D2F43FFEFB7CB49FD3D6AFD6FE20301683BA6ABA35C49153E0C3C86B6DFD
C8D25DC9161ABC82F73AF2E8EB2ED7D2E4A2A92044A40781B57D11268264A000
523C1CA6ED60E3968F3B04A6F23BD161F30EB9AFB73B04DFB98F88CDAC56EE02
E71C076E822F4DAAD42CD9E5511528827B4332A5E1E0B7158E667BD57B2AB9A4
375D078FA519C7786E706D336A88511E114CBEA8C9DF5EE4BC27E5DAB457097B
CAA946B0D999C1BDF7F58919BB1408C3FD9FCAEA4AAB226741FD327EFEBCD647
91E8616BBD43698D06B2BB0977F1F12BBEE758F4F38E98735538C22959B191A8
054028C813EC5B5C87BAD388B363D54E951F0F0CBF38F7A0C3F0DBB7D23C4E25
D89BF908A6145E332A2BD3DAFD2874FB7CF025A378E9F9C7E3D4E8BCC8EFDBF1
56D9C511D799AE3AE498C203A71F46456E378D6300D9788A0447A5BBC5D34BD6
BFBCADC8CA2553428B381A2D070540AE6A06AE4FEE784A3D403CC8D91173B3A8
0B565DB435ECE274505F4B46B08ADF5F064A997D9C4EF89286BB4FDC00B43AD6
F76EC0AF37613B2382EB4074E9AD37094EB4FCF40B53E9BDF38D4814019312AC
94771884EB9D930B238BCDC63CD8C3C35CC6F7EDC3988EC47DE82FFFAE6DD327
4621F1066A433ADC084E1DECF50449AA63808D29B000C42C1F09951F603DF67A
9F68BF83F2CC9D0CD679CD5C02BEAF6923DEBE1CEBDCE20937D011EAA5A6D784
50AD51811138D8AFC3388C4FBC87F8A95ED28AFF8C2024B37DB98C5E5805497F
0424C0000ABAC4DF9E1FD89F2F8CEE729985365A6D53BA99D470338D0CC99E07
8309AFA34214716425002B0C564C7D9037D6BDF67B14F5802416C728E6AD6ADF
880D4714A3793A29B21AABDAEA9C15A0D32F029213870FF505E8F19B31B6EA16
9118E74CCD11B6CE6A4AA11C7809FAEFEEA7A9B9E6AE1BEE5D0C03F6955C3E95
87A056347AE1F8ED036191A835A1642115C9B91000925C2292C2EA9D2A3D47A1
DAD707FABA47EE730B9DB297C36A9DA347B0AB34BE013332EB42E9263ADA53B5
A99D38993B8D2302ED95385F32EDB8272B91484309EC39F2F1943BC1EBC11DA8
7FC4B11CE071D9F7F959365ED86907243403351FEB485398BB1DB65487295827
3385FFC8CD0E81CC20279FB49A7D7C00978E0D6A3D948BE25D26061085959B1A
CEFC1D7A8983D37A7E5067B128BB17CEF57626D9554CD821495EBE4BE16BD0D0
A22F88E133265D9AEBD2E39B824D5A3A12202DC3D3C81583D02D4BA63950BF1E
B9FB2672800708EE7FA7BECE32E893511E9D3302B9F63BD4C3F53148EBDCED76
FE264343EBB743631BED0D9A5248806D11B437F20DA9DE2579196065C2AF4AA1
21AACB2C8FBC3A26772B642A64A2ED70174C45E0CBAD36A8541970F6054DEAFE
4AF6C4855A5D0994CEB2C60F90BF664BEF1D284A37D5187EBCBE104BF1589303
D39C1C957876C1C2C91BDD183FCA4D3C31290176B3E0B5466941D844AAD933AE
74AFB58C505C7A1F02A0D5C0DBA02DDDAA0CA462660B2CB0896BDB80812B7739
D6E3825012BC28333871A4C721ECA51D39A60A7D4ECFDA477195042DA67F6C5C
04AA0E9A96570D2BF376B6DB16B652FE4503F21091C55BC96CE3671BF96CFF98
1C37D4EA17DB0D2FB7E482EDCB9A81D18FE4443B0F21E31D0919750E6226168F
104F092952C880A66CD4F640C2A5EB0431DF868C281143A21DB4416620639509
B32E7FD6B221A3BDF7C23728230F523AD2E083431F5214E3C4165D8EA9A48FC9
BC26665DAC4BBE3E9F327322342EEFC4ABC4C8A7AEFBEF8CBB2505C4E8D64E4B
6176C72F569181580E35F45B64A539A965DC36156C81845C3D2DA5CF539EA698
A182EC58ACBD4F1F512B25B09003EC89A1089BFCB69930F383AD26080198F920
24172923CAB8E8314EF3101CB0584D29F2C1C550CDEAD2265AE69BA810860210
4BF2B5C9855781C7036F1900635685CA4159DF1CE4482518C2D0EC03CBC2C443
ABB445D68581ABFB3B1CCC159D0515692ACAE9C6921FF4A952E7E65359D414CF
BB722E49C9AFAD3F1B59A8E9A9659720946DAB4EC5E556D670A802E542375951
F0E6B7A7FFBF70B6AD1AA1659A12357082880B56A79D132B32EBA5883E34FE34
2AD928DFCEB297FC7FC86F19716295B2222A1ED410ED90C5FA3B5F39CD6A4D8A
D115CCCABBA30465AF219D911AD49163FA3EBA6146D180C4C29706E4A927B9F6
A4481C9995D89F5ECBB7839574393151F2793EB749BA922E7BD4AD688A7C92F5
93D6379B41728B601DF05249F201594D2E81881508D76540CEB8654AC79AACFC
5DF139B7D03769D2093DC67A16BD7FBCDA6523DF321EC008BBE88B8171655995
02FD6B3B2A1C9A995574D3D0D62AD2B34E90C7237E43D3734DD72602C2DE8782
98201CC77A2BE3BBEC8CAF50D50CAA3EED9C50443351FE351E9EAEBB9842FA32
C2C26429EA32F3E1E89926BEAD1C0EBF62D29DA57020B377999F54B395DF39A1
0BDD45B7D46B22E7CEBF6E65CFC4D74BEC9013F418B28C80C08356FB9822B955
0EAE0A3B817584E6E35EBAAF85AB5D4E7969B0DE179547EA664693E5719EE3F5
15A97B2EFE11526767E2C7527922F8F769C1DE7F7FF73A0EA3ED9D6725CD647A
357836D0DA719E0BAE10905C8CFCE3AAF847C00C32121339F33D7362E622FBD5
A6FEA9CDA051DF835413151AAE0CE9BACE97DDF994CB294A5D875BC2C7EF6C89
D03A8963919E8F296C87058E81F483BF4FF2E24D062A680CE89B2A4D631D7D11
5967371F24137095085523AD9D3CAD88445AA657117E3C5A070AD2BC34D84DEE
6795B8CFE4F871A8EA71DB2C6079C8F4FE99A0C47370456F0A2882DA539CFC85
1C11D6A00A1A0E22590800F776E2C019BAB7EA64448C45B97D509B3156625628
BA8C3E646151BAEF6428408A9E81594058BFF808AD340EA799537DA50B27493B
5660C425338B44D679F8F369B94AC15D3C1FD9417E926BB95CB956381065A1BC
8F98C5A92758482E8DFF246ABF59557A79D7A8F5BC52464DA99F090D7902621E
99084819631CE8F3DF694AC4F1A0F4AF5CFCE1A1D5C7FB00C42B77BBD2B84BAF
8140945D81A28E7E4DB2631CFB92D99A5CB33E8B6C80213E54865B6A43F5BD1A
8776B9AFDEF309AFA50A095781100BD9332E0CCE798CB2155C991ABC02610623
6EA30AFCC8565E00FAE394695026BA2F95BFB6FDE84F9435A1D116CEC665D25E
F4F7BF58CDFB8E31F9A3DFA1C1E2354D2D56D89A559C56DD524D2FBF6BA99D52
16BA9425510BB0FA5EE23747D0C40A7F7DCC5411D57D87BF65729C59E6650DA6
C7D7737DF514DF8B3CEE395B2A307C7944512E3988C7769C7EB35E7FF61CB417
4A857396DBEA7137619926171F769DA6ECB44B61C1B4FFC8004CF5A477E6DCD1
85A5726DC3907D88C763FB4BA97BE1680A2FADB70D63C3EAE3E1DC5DED33C3AC
DB67FC8EC348FB4D4A2DD47F463DDCB7B1517CF740CC2959172EDEDF20C5A60A
5E100CEEB4504AE64B81CF197B33B2CB784FC33A297C433E5D55C418AF05288A
33EFCC5C6A4A2174E5359C788CDD923B7767E2A344BF2E4B6A8A1815B1901157
3D25735B2BD6D4C25960D44D9AA01D28199245893310CC7BCF6D0E0951FE0EF5
F6F713BD099DE8A7B2AB9FABC12ABD52B56D817A1972C0E04A1A40E171D9EB2F
C716666B04C9641CCA7BFE1153B29DE7AF67208A57A7F53970BB87D77453B430
F27C895D366E3A2F66A5244B1019AFECB41CF87B154014EC13A6FA7F12554484
40341D5FD76F95B82EE5CE304D7DC8EF0FD5AF6AFF4237421DBF8BE5E383929E
8FBBA68D9C216DB3827D40B45D033CEE9B31470D7E7E9F3089A5BBC01462D37B
34A75B79D0621234904AE9FC7987B298C2CFAA6DF2759EB1151860342D2E31FC
08E7B20AD78902ADDA32CD4A2F758AB7FE5A44DE4D1DACD794FBBB064C289BCC
E632DCBDCE47D4D7B61EF027029697A12DC3ABBEF7F5F409C0DC2514DFAFCFB0
63AC975902B4295F02BB441093F4E8D0285F79436C791A381FF672442A660B87
EF72C97A1D4D20BC39AE3D67CF48C481748DFBCD7A690A4A94AD238BC03C46FD
363190A48A4EF0EDCC5488BB8171D2E50ED0C85F2E5756810305E74C18771287
2D03DDC0063904A104459C572B88E6C850CB833320BB14541603F97156CD345D
E6E7E458DAACD7F22F3ACE7A6FBF1F070ED983AB679D4240E51A603B73DD4C26
88FC323D12E742DF393F1CD61AFBD8A9FC6113BB32DD68EC5E7209E4C33805EA
E3F4B320B2DAAEC7BBA10294CBE4EF4B587AA87E01FF3AD8CB557C56DBE462A3
68750E659E93C9E567CFBBB57FFCEE8CF8E78E101C8C9303F394EE043F414538
7C6753490F9EDDAE3B45141F823AA03031E5A4A078E4B8592426F23F05AAEEE3
2A209123531FDC8CE553044E81D7E57FC50203EE6EC6C2792657FC43B422B967
6A2ABF9147FDA72F07EF5E2AAF13E1212C4B34A45BCA8EAA0B91CB968B4BF2B5
D47C6FB61A2974858ADD96AF1D313C219C24FA4F0EC462BC14379D702290374A
3E860689EEC81CB656B8498FA6E576C7B7BBAC7F1DD093CA3318446A1F13C261
E29E9F7CAD486B81D342465A67A180DA4E508798E671F03802466FC46A62A049
60C211515083697BEA7C62DD9914D82E8D7D4358B4B7395597B8F4ED9F4C6B49
61EF770F91E17AEF3E687EF44D72771315C509B1B3649A0EBC73C882CB6BF888
6931A188FC5567BAA9FFF44BD0F89D7775B3BA81478E57BA1031FCC46EE8B0D1
F07E4F03E7A55F2140193B704A2B4C61CA675F7195E6DD23543C48260759E68B
CF97EC274D81E1D5978894C67B763D1F9A2C2CD6026E5893F39FCDB84FF43343
FDE9489467623C21F8D80E9C1311AC5A32F0CB4B8110C240430EE3BC24B841E2
243D3AED7739078D041D4BFC23D509B658B8A2F8BA40A5951BBB6FD4913C81B9
1D30B75A4A575ECED9162CFDC23730D4A765F70E19A6F732E7754B7AB0A1D98B
0C4057D1CB9948D7BC50324F571D5CACF93AD8A58601100AA7E0493FB8875282
0B38252E3CCAC480BCC86DCCA64F45304D943209984A5F08D4FD828139025BCA
8C662386B006A01A109A8C842065E943B859A461AD51B917B823DFD8C72FE11E
213075C5B7075079E5A79A88DB6B6D09AD53BB5D601E6478CC883BA5283C4CCD
C774A23CDC93373C2AAE05A53EEDF2DB70C34FD8E188A31C418D7B7A72BC599B
14135944C5DC65D0EEC1E410250A1663C3B84F2C662F4B1201199338D991EDAB
73AEAD04E61243EED2957A204167F237B1E969CA61E6B6B5133F774D80099120
455D2F307C1B6DCC8EB284DD444651C8CB65C34A0508406FF62821C763B5F56F
4530E3C48F2E7BF81DFC00D1AA021F82E622851093ABAE2290165E03A5912DE5
92C86509C3810B0795B675E7B9B204FDD34038FD4DCBE5C5896CF02F98E2217D
462DB4B071C6DE02C2080F38F11188D8DAEB8FF42A3EE819DE882920E8549458
66A09ED326BD5244D03082D5A4142091B57A9E74311FA917B10B32ED08E75670
8A92BEB3266C341316843FF1E4F6BBD9B4833F27D66B7183C5F279459CC5C316
C996017089A130F9BE0B8EC6EAA48C7BD34E501E746526880B7237A5CFC895FC
5A1285067EB97605D1FF6847E3ECA9268FCA1CCA9644B6BA994F2BFCC0ABF4F9
E918791171D02C923EAD1146E06E64EDFBE4FEF3146BDD11458391EDB1B9828A
60A3091A3987D3B983DF81DE02C37E5D7A647EC16905C103100CAAB109EED57A
4898E5627D7BF941D0E1BB0DED677EC8F3A3E85344FFC2462289A91EA2E4A54C
143C50203FE37BEB99468E50D1E33B47566788D4D53185F4EABCFBFF392FF78D
B5FAEA678C981761F62B78FB7AB0813D5085D4CE6556E9B43A5EE9E32E9046CA
E6D7B2AADF495D1186B38736B82FDCF0B7B8175D42CB6953F7DCBCE1C9FEE9CC
BB1C745CCA32609E69DBA2EB9CC3921B7CC1E4C7606D4C1AF2B963CD0D4EAD8F
67D27976E2E11C40C807E87A12DEE1216C80F72003C375DA26BB94DAC9C9E4FC
955BCD026F61FB3CC7349D93D7B1ACAD127419746870BACFB59E15A95D72D897
211C7D3CEB5C436C1DD932499607BCE9388F9559D21B033B3830F00468577053
A750BEF392BD6AC62DEF7E9A7B4D4EC54D3BA1801873CD88B1B0E29D07A5AE89
912C94A544489395E3A60511856E2D2A1C158CA677F59B28F1BB8DC0FA97EF45
AFE11526711CE5C3A7479895F152C657361FD257A935E2F96AF504354A33A8F4
F2480EB5751ACB51735484BEC2EEB10B6B1B074215A04312F6086D865C491E08
A7A904472CF6BD4B21B40DB550C040CA545ECE114E35F22F94D503BA54816A2B
881133A531332B2168ADF6F2C592E5A026B9EC390A513AE25904DD50136DC481
AF210C2BBF155D50842272493E1BC1054D434B024D61C180ED246F6738710536
2A29058FD73698AEF59344FFE3B32A7B5C40EED1225CF7C48DF66F1A07C914CF
0118C478A10BFB49E64693F7EB140D774A6CD0E650943FAA1D9B3B12DACC0199
78C70CCEE4B3207D07CBDA4B8FD30EBFD845F88871A2DB98A486067066C9670E
D494691FF6FA72F2279CAD6D6C8C34E6D2668F53845059FFD932B177E79AE728
41DF572FF8AD7D76B61361918556BD9772626D2A4964B1B1EB88F3B2E04F53DF
FB22EB74EF425F39153A1DE7EF28484389EB29231BC5ED55D1D73A4153886A83
D711B2422DDE5D35FD89983DC2B408FEA40A23CD9351C4AF44DC2E735A6F43B7
C5DBC36EF5FDF407255337EE61B6A448F67720287C83652215E8934143E3C3E6
1184D5E6D04A114D9EF68446634B1C442A78C58D3BA9944A36049152DA46CA3B
5A596C46C6FFD0A52352254BA7846BA190E05FCABCC89CA9BE7E6BC2B5E8A3F1
B3AEDAA7F3B72D9DDE797AE443F5425E9ED5DA81C6534E56FE6BE16462DAEE35
D65CB18A38C4A001737814212BC0081A689172798629821F479521AE58549646
DA07538CBC9392BE2D2549AB13B74B19864E5AC060862F91FAC4FEBFBADA9AF0
FBD99487B5D66221E781BF13555C40A1EECA85CA848171487490691CD1E265DB
2F52ADE42614AD86E0ECEB287059E1BBCFED5335E99F335D7C813E5AF430C97E
9F03BE9AB47093FB1013D9DB97993CD522C7FEFC04885CAC4754162AC84B13B6
357ECFD941028B4C10FA49979330FA75EB27679B55840F4317269A597CF3207B
163EB95BFD4A92F6EA8B381AD337C9E0E2DBFB94726F4A0EFC444E6B7B18CA35
F1D6857FEFD7782566C9AC459D260CA1BBDFF5EF5FC58D54DF780D27CF5ADFDE
DC3D2CD7AE2F5C3367FB72E55805ED9DCCEEF4BD046B19ABC1DDB0C09034EFE2
C31BA4206724AE14F91D33B33A1035CD7E4B27596940772118961BBD16A11DFD
7D48F4688591F5E299C34C32ECD1A8045980BEA99BFEA330A485DAB7A29F59AA
72267696B5DF12DEA51357F442B0E5B33305826BE90336687E2AA8F788C5D497
80D19BF7411486BDB23B09BAB84661D11E39C14548EE336AA6553816C5732997
AC6B8AA55F9F79C4895D5A7AA71714DF030E432EAD955B78D0D6B64967479B48
C7C4016A378CEC434C7F84D0D5498F7B967B357AED234A3927EC75523AB46A7D
55FA322F6FDF092A84D402467D20182D21DC5B2D8835636DEA6B5CB4D472C2E8
9C26370257EA934DF2891D0C954B91DABB677A5CC931693B9567F5AD536C3E7D
C81631F01A5C2F0D8609D08CB9A816D9C1E5E8342056B6580489AE72FF435D3B
991F3602153DAC44D1D52103521400B72F481E3B090DF5BC7E675455995551F1
EA078003482DE60E467AE027C76A3957A7B38E55439DADEF29347D7093ACC156
0691D87FAF2A4791B7D0F5AC6A361C7451D2532BE9A9586B6DDC428E84AFCC99
E5B24F4BB7C421AE36E559AC4924A59241A56E5888AA86213F172185E13D35E6
79B594EFEF54EB7F8A428AF53B81DD69FADF87820E66632A3187B6B8FBA4E69A
CF524358820CFA8CDD444A2C6E51D8689E3043E947CDE1D375B3BD783E9549B6
E792B10319A0EE32B89FA6ED11829B01B6FC661D6306CFC5B69E91CAE8122133
CFF9D18798E26E74168FC71F76F7E378CEA51CFF332CAE12B9313093FC6FFDD7
441A77F643FDF9E3447240FA740347F3422D471F5FED901FD5986C2E87CD7C50
6DBD8B790B574B633B3CC55B73C14FD2A2ECF55A068DF2485D445BD234C6A21F
68FBBCB7DD0B346F25D323244338E9EDF7D184AE02EDA60669E1ABF762C79E16
22
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (document.dvi)
@start /Fa 206[37 49[{}1 66.4176 /CMCSC10 rf /Fb 255[77{}1
99.6264 /CMSY10 rf /Fc 144[34 8[34 102[{}2 66.4176 /CMMI8
rf /Fd 133[45 48 55 1[47 14[47 19[60 10[81 2[72 69[{}8
99.6264 /CMMI12 rf /Fe 138[62 44 1[46 59 1[56 62 93 31
2[31 3[51 17[62 63[56 19[{}12 99.6264 /CMBX12 rf /Ff
177[81 4[40 81 1[71 74 3[81 65[{}6 99.6264 /CMCSC10 rf
/Fg 154[31 50[35 35 35 35 47[{}5 66.4176 /CMR8 rf /Fh
134[51 2[51 54 38 38 38 51 54 49 54 81 27 2[27 54 49
30 43 54 43 1[49 7[73 2[73 73 70 54 72 76 66 76 73 89
61 2[35 73 77 64 66 75 70 1[73 3[76 2[27 49 4[49 49 49
49 49 1[27 33 27 76 1[38 38 27 76 3[49 14[49 6[54 12[{}59
99.6264 /CMR12 rf /Fi 128[59 40[88 88 85 65 86 3[88 4[42
3[80 89 2[88 45[59 19[{}12 119.552 /CMR12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (TP ; L3 Hydraulique)/Subject
(Hydro-Informatique)/Creator (LaTeX with hyperref)/Author (Mohamed HAFIANE)/Keywords
(LaTeX, PsTricks,Hyperref,...) /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -254 -953
a
SDict begin H.S end
 -254 -953 a -254 -953 a
SDict begin H.R end
 -254 -953 a -254 -953 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -254
-953 a 0 TeXcolorgray Black 0 TeXcolorgray -246 -222
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -222 a -246 -222 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -222 a -246 -222 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246
-222 a -246 -222 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -246 -222 a -246 -222 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -246 -222
a -246 -222 a
SDict begin H.S end
 -246 -222 a -246 -222 a
SDict begin 14.5 H.A end
 -246 -222 a -246
-222 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -246 -222 a -287 196 a @beginspecial 14 @llx 14
@lly 63 @urx 35 @ury 867 @rwi @setspecial
%%BeginDocument: logo-univ-saida.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: GIMP PostScript file plugin V 1.17 by Peter Kirchgessner
%%Title: logo-univ-saida.eps
%%CreationDate: Sun Sep 23 07:49:39 2018
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 14 14 63 35
%%EndComments
%%BeginProlog
% Use own dictionary to avoid conflicts
10 dict begin
%%EndProlog
%%Page: 1 1
% Translate for offset
14.173228346456694 14.173228346456694 translate
% Translate to begin of first scanline
0 19.916078740157481 translate
47.990551181102362 -19.916078740157481 scale
% Image geometry
200 83 8
% Transformation matrix
[ 200 0 0 83 0 0 ]
% Strings to hold RGB-samples per scanline
/rstr 200 string def
/gstr 200 string def
/bstr 200 string def
{currentfile /ASCII85Decode filter /RunLengthDecode filter rstr readstring pop}
{currentfile /ASCII85Decode filter /RunLengthDecode filter gstr readstring pop}
{currentfile /ASCII85Decode filter /RunLengthDecode filter bstr readstring pop}
true 3
%%BeginData:        28901 ASCII Bytes
colorimage
hu=)\f=RoHO,]<nYK5mXs6'E4~>
hu=)_o',2kgY:NAk3htps6'E4~>
hZ!ZTqt^3c"8VfkrIP"3s*t~>
j8Th5N(+'Q"s,K_7Rog+.2)[]-"j7<JcG*:J,~>
j8Th\g;L.oYdhEa`5TX0]<nZ?\Bj70JcG*:J,~>
j8Thjq"+"CnF?)@o^qbGo'l,9nb)bWJcG*:J,~>
kPke^Zq1626%6cFrs.V[=XsIaK@PPQn,In~>
kPkeckJXF._Un/Irs/8VbIjs_f^aUnn,In~>
k5PY^o^;5?p\XX`#QFPlo'c)Br.4n:s*t~>
l2Lq=?N;3`jQumMWBCCuWqV)Eo)F4~>
l2LqXbcJ>$p?_e_jMA(,jSXT/o)F4~>
l2Lqbp$_GErp9XfqXa1FqLS\:s*t~>
li.+7-3Zj$k5PRM*WV#fJcGBBJ,~>
li.+W\Zj$Hk5PS?\?4H]JcGBBJ,~>
li.+cnaH,Lk5PSZnaH8PJcGBBJ,~>
mJd:J,RA,Crrgmu!0d;2s7ZJC~>
mJd:^\ZjE=rrho(Xkiu-s7ZJC~>
mJd:enaQ82rr`5in+_J6p&BO~>
n,ELe>QS0drr^me!RcQ!p]#a~>
n,ELhbHK.Grr_i!XmpuBp]#a~>
mf*@]n+GN:"9%`Xr.4nBs*t~>
nG`U;!$qI)rrV`WqtL*mSH2.Xq#:HZL5+dfrs4R?S,`MdM22'.rsO[<h>d2#LW8D2Ltqq."h'5?
n%X\TM$&k>s,6i4",`>Po_e^nl$5QT>Ij\2rrf'QLB"dZM$/XmM2@Dnrr]WbL>D1qJ,~>
nG`U[Y.=PprrV`WqtL*li3(#mrr_J?LZJF6#`ah5s8T'VM>dDQ$]Bess7V,&a5i,8h#.0U[u,q/
^l%uH"-W]aN;SS8Q+6Jars%_76p+bdr;Q^!Ul1$.\bV-dMVsDNPl1O`[>Tgrli2J~>
nG`Rfn+#Q?!r2Hep\t<jn+6;R"7s=DnbrIn_njOrs3\[!rr)j)_8,I<qS'f*n\N'/r;QoQ_8#^#
q8!0Ps8Tt7_#qQpg%kRG#4oBqR&\m=rr3,I_8-*)pq[($_84.hrr^oi_!UIfJ,~>
nc&Yu!2elX"0tiWY4qqur#c43q>UQI/hYKKrs1D5:]LH)/hWLhs8O\X`;f9Y/t;Jc/k#X;"@=_(
s,Qn-"$HV`1&3F%LAq2QLAie*0E*R/q#C@u/h[0Upau]nE@rllrr3)c/hUi&s*t~>
nc&[7XlAIB"12#]YP8&!rj]3/q>UQJ0eq#Qrs1M;;?-Z.0eo'os8Oe[`W,B]0q@nk0h;0A"@Ot0
s,d%2"$chc2#/j+L]7;RL]0".1B'!5q#CA"0er]\pb;orF"oDurr3)c0emG.s*t~>
nc&[`n+u/G"4sB3eb9"Eo'cSRrr_MKP32`C#aLRJs8T6bP0*\&s,m]Hs7VV=bP@<aT)ATkS<B?@
`;,PuRK*;Oq2t`nrr2u6qN;*\s8T*^P5i8kOp'mSP*5#-rr_nVP-F6OJ,~>
o)Ab3$1dE^!:0I\!V?<`rrSAaV>C2oeLiK#rVm$W/l2NIA,\(\n,E@e/d]Jrmk-5^s)]kIrVm/u
/hX^7N\2s.r5L&*s8Of+8B8`hZoK`kg],t[/qO'$Zn<t5s8Q:U0)sbI`lg%g8,gL8nc(I!0)#>F
:bFBbs*t~>
o)Ad#Z2<ke!:9O]!V?<`rrV#YiqiZWehJo*rVm$Z0i@uNB)XLbnG`If0aYi!mkHPes)p+QrVm/u
0ep9>O>/K7r5LP8s8Oo19?>,m[6-/ug]-"_0n]N)[4sC>s8Q@Z1&p(L`lp4n8]Sijnc(O&1%tYI
;_^#ks*t~>
o)Ad]n,DYQ!;60f!VlZerrW#bq>1*nl&q4lrVm%dP,&'WY5XRap\t3mOpU(Hp6(T^s0n/TrVm0#
P*4Q!`0-;Fr8BHls8S=HT]4qhfU.hbm/QF8P.gnpfTMDrs8T*^P5jq.iT-2cTAnhgq#?VBP5>4Y
Ulpo*s*t~>
o`#!k$UsL`"k3#ARf>>3rrUmS?Mja)eLiK#rVm$W/l2NIA,\(l0`D%O/hY*Bmk-5^s5kpdV#LB!
E%Wd7s,J]aq#:CM/lDTI#M:X]VuOUd0`D"V9.hjps'%*.r;QgP/l;KG#kTc&D?$"V0#HlQJ,~>
o`#!lZ,Q/2"k3#AS,YP7rrVembkqDBehJo*rVm$Z0i@uNB)XLr1]@@R0epZImkHPes5l$jV>gK"
E\T<?s,\riq#:CP0i\,O#MCgdWW0gi1]@=Y9eeC#s'7?6r;QgS0iS#M#kTl,DuZ:]0uN8UJ,~>
oD\j\o^;__kkP2$s-N$N!r_Q[qu6c_P*4u+rrn[NU]:@srfRhVrr<"]P2QB6P*4#gnrf0_rr351
P*5Y@`0-;YrrSFJV#C;ul]RFYs50!'rVm+rP*5eDWfiPCrrSCIV#:5uq3$oIs2pLfhs(/k~>
p&>*`"b?"?$:=dm6N9.Ds8W&&rr3#Brq$-km/THMrr^e(0$jLr))Em@s8QR]68'sUs8O](`;f9Y
/t;n@/hT![rs(P:E<#ru/hZr!!\l<*rVm51/hXp=hC^E<GMW/r!a@90r;QgP/l;HF#)t5fdk38&
kl6/~>
p&>*jYh/:B$:Y!p7K5RKs8W&'rr3#Crq$-kq5_F2rr^h,1!fgu))a3Hs8Q[c6o$K_s8Of.`W,B]
0qA:D0ekWdrs(Y@ErZ0$0erJ'!]2W3rVm520epKDh_?iEH/8At!aRN8r;QgS0iRuL#*1JndkNS.
kl6/~>
p&>*mn+Z5L$Cq.rSc>,Us8W)Mrr2uZo)Adjn+6JW"6ku3k5G;tQ'.pBs/qNTP*3lcs,rQ's7VV=
bQ%U*P*Q%H#FL[]s8U$#P5,%YP`hmArsIA@P2?6,P*2*?mJHnbWfiPCrrSCIV#1/r`0-;IP*3KA
s*t~>
pAY3a"I\`Y#jJ120h+AZ/2.#&#3ii$r])M%o)Ad_!'gG^"4]"Vci*kh1G2K's'mZOK.\e=s"5qB
s6hQmS,`Mq/h[&$h_$P9s8S*30)RF50\HF*0eP4O7n,g!/kl9E!1s-A!]!*Mrr3%(/h[)%!\c6'
qYpO[r[n1-kPp&~>
pAY3kY2A^J#jJ751e9qe0/EP,#3ii$r]Dh+o)AdgXht&:"4f1]ci*kh2DJ)/s(3uXKeY=Fs"Q7I
s6hZsSH&Vs0erS*h_?k?s8S081&Nj;1YMg.1bgj[8Ou9+0i%`J!209F!]<ETrr3%*0erV+!])Q0
qYpO^r\4C3kPp&~>
pAY3nn+lGP#kZKSPb+A,Oco_D#4pXMrg8fDo)Adjn+6MX"6ku3k5G<*Q'.pBs/qNW^64ZMs,rQ'
s7VV=bQ%UpP*5eDmZNb"s8U$#P5LORPO&8KP`h9'T:VU;P+hmT!6tJ*!gK8/rr3&"P*5bC!gAeC
qYpPbrfR8HkPp&~>
p\t<n"do&a"8uLrWrE#*VG&`j,>UCBb0T2Krs%:sT0DCDU[e?cp&J(krr^b'0$jLr*]#EEs8QR]
8,kJ"2?,9]`;f9Y/t;n@p+@t?s&C[(rr3%[/hd)S"4dGO1&ER)8#Z=`rrM24r%8.hs8Q:U0)Y_N
0J62urri-O/hY];s*t~>
p\t<oYi#3T"8uV#X8`,+Vb]/t-;m$MbL#AMrs%;!TL%aKV"+Hdr2n*?rr^e+1!fgu*]>`Ms8Q[c
9)gn+2ubTe`W,B]0qA:Dp+\:Gs&Up0rr3%]0f&V\"4mMP2#B!/8ZDUcrrM26r%S@ms8Q@Z1&V%Q
1GMi)rri-R0eq8Bs*t~>
pAY0^q=jmkri2X>rr3>QU6LXsURAROk48NO#48bAS+<Z,nG`OXo`"jml&q4lrVmq(P,&'WY*,FW
QBIO5P*4c'p6(T^s8VqYP.1IgP*5hE!6"\r"6ojcPl$UFT@3]:rrMZ(r/q5hs8T*^P5P=]PEMa<
rri7`P*5(ms*t~>
p\t7$IJ3[K;_9Ue^1/lD30WY,q#:f[-WpEK\L:(Ns78`=AbZ31o)ORGs4].Ybl.PU0J63%s'mZO
s6_KlT.hn9s6hQmS,WEl=Y;?,1G5a-rrS350)5GQ0eQ5ehDm2Pi;WTQ$1#ep/hZVm>:qQ+rrOl,
;#1+m:G+ins*t~>
p\t9!f(T+O<A6-p^1B,L3gK%1q#:f[.U)lP].6UWs7AoCBD;E3qlJKNs4]7_c2IYV1GMf-s(3uX
s6_TrTJJ=As6hZsSGrNm>VRu52DM?5rrS9:1&1bT1bhkoh`NVZi;WTQ$1,nu0er1t>qn)3rrOu2
;u-Fp;)(B!s*t~>
p\t9`p\+UpV37"2gocm$QcA[sq#:fkNi<!XgQ/&Ws7r:QYP8&&rpTU]s6Po3jo,2nPEMaAs/qNW
s7VV=c'+=Ks7VV=bPqMGWKNGEQ'0VqrrU-%P5,%_P`hg7m[00,n+ltip#VO'P5#!VP*5bC!gAeC
q>UMkP+1V6J,~>
q#:@;6hUHa/lXAR-m=E&o`"sjdJa(N_D<H!]:g`*V"aloiW.4&oI_c2rVumM&mkV<@kL:Os+`3Z
0.t3Cmk-5^rr32b/hWbK0(Al?!felcq#:gY/lDZKoIqmMn,NDo4])+W#Q68-kl4j>0)Y_N0J62t
rrPtK5j&)s~>
q#:B)_tF$70ip"^.jU#.o`"sjdf'1O_DN])];$u2V>'upp9*laoJ&)9rVumP&n(b>AhcpXs+rHb
1,6cJmkHPerr32c0eo=U1%>2B!g#,kq#:g\0i\2QoeS<Wn,NDq5Z7R\#Q6A3kl4pC1&V%Q1GMi(
rrQ%P6g"E!~>
q#:BboC`+gPGXJ*O,LjAo`"skkPbDdhis+ggWknCd.dPFrU9[aq3$otrVun\#cn"*Y*,FWs2"Ys
"lTFSP*4#frs&%WP0K/Qp\t0o`0-;Yrsk9VV#UJjPEM+&s8T-gV#C;urfWH9s/M6Fr;Qh^P,.pR
!i(pJk5Tr~>
q>UJ-$M=?$rJ`S1Yj)/lf0puV/L%Fmrt;I7oD^Qu7JQo_W@ffls8QR]8,iMg5lNA>`;f9Y/t;k?
!<)jK!)idq!felcq#:CM/lDWJ$,/#E;?-Zc/hX4(rs*0h0(8gE/h[)%!\c6'q>ULl/jSS!J,~>
q>UK@Z1S&!rJib6ZK_AnfLI>_0I=!trt=Fqqu8N.8GN5bW\H5us8Q[c9)ehj6iJeD`W,B]0qA7C
!<)jN!*0!t!g#,kq#:CP0i\/P$,82L<<)ug0eod/rs*9n1%>3K0erV+!])Q0q>ULn0gk+'J,~>
q>UKgnFZ_`rkt&Kf'32=l^j*/Oc7lbrt>1srr84GT)8QfdZTd9s8T6bTDnijS,SQSi;`M6P0<k)
!<2q[!2]Yo!lU7bq#:D[P,/*W$/Lc-V#UJ<P*4;nrs,ckP5#!VP*5bC!gAeCq>UMkP+1V6J,~>
qYpWF!;#m`"3`qUH0,&.VQ)"co`#"h,6*c(/d+L!/hT![rrQ[_8,iMglM`C>`;f9Y/t;h>!1Eg=
!8@DO!feldqC_gJ!\l<)rVm4I/hWUmpbaZV3(a*%"`jYC>:qQ+rrOl,;#1+m:G+ops*t~>
qYpWeXo%ek"3s.\Hfb80VlM:ko`#$6\Gq`k0a'm)0ekWdrrQde9)ehjlM`LA`W,B]0qA4B!1NmA
!8IJP!g#,lqD&$M!]2W2rVm4K0eo3uq)C)`4&#W."a'eE>qn)3rrOu2;u-Fp;)(H#s*t~>
qYpWpn,E"["6Gu3\`NhndF4,bo`#$cnc-T-Op%;@P*2+0rrT?dTDnijo_t!Wi;`M6P0<h(!6Y;(
!:9[a!6"Yqs8N.bP,/'V$Fc1]b5_C*P*20)rfRGms8T*^P5P=]PEMa;rrSsYS*'a$~>
qu6`p!2&ra"1osHd,Y-.qK"!*o`#%)QiF0Wr@S+inc&OiCH58jrs4]G295ac0/oU'rri<]3AgX3
rrJ?DqDe^Cs8P2A>Q"L+9K=ups8%+!r[n4>SGrNiA2uOFrrP8B=o&(!=ZK.;s*t~>
qu6`sY2K!Q"2$-Nd,Y-.qK461o`#'#hZ'`Lr@n=nnc&OiDELnsrs4`K2ou$g1-20.rri<`4?*09
rrJEIqE+pIs8P;G?2X^-:HUT#s8%1&r\4FDSc8WjAir$MrrPAH>l"C$><GXBs*t~>
qYpTbq=XaiglIrej8T5Z[Z7ihrrhids4!Y=Oo_ucrr3&*R&']\#fW-qirAb9Qd5O/s-NhPrVc`s
a-ZXi"e5PlR@(#Prs,9cQ1P%R]9WAY!M7L6rrT?jQ2LX`R@'uLrrT-dU#uB*~>
qu6\-,PD'=S0Cc,p\tWcXE-ZL%13e%=-1Msrr\E12u!%G!n./7rr3#kq83.4r:Kda!<2ut!<2Ti
!<20]J,~>
qu6]B\b5t)SL%23p\tWrjO;#VZE^gMb1uCXrr\K63qr@J!qEDfrr3#lq83.4r:Tjb!<2ut!<2Ti
!<20]J,~>
qu6]inb)nabD`4pp\tX#qY'ROnF5u=p%\IYrr^9#Qi$LV!rVNdrr3#pr5/I7rV=V9J,~>
r;QiX!rM]k!g+aBq#:s%Td0Ue<Jds"bJ'Te5n<s)c1q;Dd4@Z"HXNoRqYpRe7>1\k~>
r;QilYQ"7q!g>!Iq#:s)iOPu"akGnEmcrcY_m$2dn+cnfdP")*IUfJYqYpT8`.\/@~>
r;Qfrn+H\^`f77trt,"rmdg#FqYU3fq=aFKme-MQrs._LS_grZe,K4D!VGu:s*t~>
r;QdJ=8Mpsrr2p!QmHeKrri4T!%3j#rrgeG"XqUjrs$f;<&=M#@ep$)"3]<r#2m:iRAS$gpAY9]
f@SRFq>UQLf@T9drrCRGf)j[eq=Xajn(61BoC2d1~>
r;Qf0b52,<rr2p!ROE:Rrri>TWk-sXrrhl4Xh*usrs$i=<]9q+Abl?,YO:$B#2m=kR]+<kpAY9]
f@SUGq>UQMf@T9drrCUHf)j^fq=XafnG_#>oC2d1~>
r;Qfgp%n[grr2p!b)Nh(rr`#`nbDeW"T7o[nbi4_#3O(*Q2clHq>UKar7CrQn(u=3dGjckrrhuZ
lKS-?rr_TPlLY#T!9sCG!poITp&>$drosLZnGe"~>
rVloG#Pe<%UAq_KC&.c2_Z2%4nG`T*"&\dfrr^OqCbl"i!kO9brr3"6/_U.)j[/er!FGEnrr>pq
/c]Y^rrY&0/rT`/pFZJ^kkG)W=T0oQ=7H6?~>
rVlofYk\5$U]7kPC\du4m&R_fnG`U;XiUG9rr^OtDDhFn!kXEerr3#G]@m2bj[K##!FYTqrr?$t
0`Z%crrY/60oZ,3pFu\dkkG)W>5g5V=n)HA~>
rVlornG*"dcMuUXZ2+D%r9s1RnG`R`n+?DT"6GTLPlC[agqs!grrMiag&D*CSbeKMX82Pj!2TUW
!3uA""-o%4_Z'T0Oo_l[p\t5lrfR8ZnGe"~>
rVlmLAGH0,FYY@<q>UM(#,Cnl!W;`grrOkSeG9+L/j$K@oMe3Sr;Qd#`p!F+pUu??\GQ.&!9j,/
!;u]n!8IH)!&=<L"#hhbNW/tN/ca;prrD$V/c[Wqs*t~>
rVlo1cM7DAG;LgFq>UN@YN#9U!W;`grrTm6nbN1i0g<#FoN"HXr;Qf$mHFQRpV)HB\bl7'!9j,2
!;u]n!8IH,!&XNO"$/.kO8f1P0`]YtrrD'W0`X'"s*t~>
rVlohpA"Xi\!2rJq>UNhn+l\W!WDokrrVcZr;$?tP*su&q50_\r;Qfdqrn%`qq]')gAUmJ!;#oI
!<)co!:9ZI!0m<Z".,16`;]f0OoX\@rrDQeOoUa9s*t~>
rr3#O"8;`r9n3!9rrW!3)>*t//c\?9rrS#WYkS/!d3<c1rrHV!l2LbRr%8!KqYph+/hSlQrr:tX
r[n1iqYpP9r%7u0qYpXV/hW._s8FVS?CI:EGXD?]!:0L]!/UP*!/'hAJ,~>
rr3#jYP.tt:kAH>rrW/,[e0V"0`Xc?rrUoTk4elWd3X&6rrLE`l2LbRr%S3NqYph-0ekM\rr;"\
r\4CnqYpP;r%S25qYpXY0enags8F_V@@WdMH:@ce!:9R^!/g\/!/9tCJ,~>
rr3#tn+Qb_U:gF#s8VW]s8S5^T)&Bfq!S"QrrVAB\GH4+p@IPK!;QJTq>U`#P*2'Us8VSdrfR8g
qYpQ'r/q&uqYpYaP*3c_s8J/bX3/T)\=NS]!;63g!5\Sr!5A"'J,~>
rr3"16MLK`P:4BLG-LuG!r<*Qo`"our[n3>q>UNA!2TJk"8cmjh>.'Pq#KXDrroGU/if2Fq>^FH
!3c>#r@S*Kqu?XJ"$\Cj55P9]2_H_Brr;sM!/pdT!7_!#!)NLl!<2sM"%+[n2"CTr~>
rr3#E_tX07Pq0iRGd78J!r]@9o`"p!r\4EBq>UNbXQ'*V"8cpnhYI0QrN#_YrroMZ0g(ePq>^FK
!3lD$r@n<Nqu?XM"%"^s5l1K_3\`@Mrr;sP!0$jU!7h''!)`Xn!<2sP"%G""2t?ou~>
rr3#lo_8@ha,f0Y\CUWY!UoUOrrC^NOoY7PrrW,eqYL3orN_^Vq#:B_rp'Leduol]aLh9JrfR93
r;Z_Y!<2lqrfRAQP*2:1rr\UNP/RA"rfR8ur;Qc]rfR8VqZ$PX".bU<Q1=m)~>
s8N/t!93eR#6$,]s8PaBrr3!80(])F=Y;<\qu6leS%8.A!4Vk*!k^(ep\t7ZJa37;M_6Wnp\t=L
/hUo:rrgQI\]+RGrreE9/hlGe/c`T^rrY24/rfl1r[n2/qu6Y0r[n3;r;Qo!/hSsPr[n2^o)F4~>
s8N0"XS)Ag#6$8bs8PjFrr3#-^%;7+>;7igqu6leS@\=]XQ]Q]!k^1ip\t92fBWA<N%m'!p\t=O
0emMBrrgTK]#OaIrreH=0f/"l0`\rbrrY;:0ou>6r\4D3qu6Y2r\4E>r;Qo"0ekTZr\4Dbo)F4~>
rr3#frV6BsrfO>_s.S]VrrMZ\oD\okP*2%+rs&/>gA1X7qtpBpgl^+\rrM`clMgt'P*4Sorr\IJ
P-Orb"6J%diVWWX`KHCJo)=dPh#%*RQ]dNMrr;t\!5eX5!3lHc!;69i"O`HrQ21EB!8I)EJ,~>
s8N,.+8>d=H7%SM<KI.Z!FHl=rrB8%/c]YarrBk4/cr-TiVWWU1-510!N6h-rrr+S;cAVGrr35k
U1#Z,J>C'Xrr?O,/cf8#p&>:]/hV_T8M2V_qu6aW/hW._s8FVNMu3MSnGY$?eGT=P5;"R$s%"ap
1@kHq~>
s8N,`\G-",Hn"%S=-3F]!R8+FrrB;&0`Z%frrBn50`p@7pA=jj2*L^6!TUNZrrr+T<E5"Lrr35k
Ugl,6Ju-B\rr?X/0`bY(p&>:`0en=\9JJ7kqu6aZ0enags8F_QN;NVTnGY-BeGT=P68:3/s%>($
2=gct~>
s8N,rnb<%e\W6.YVo8T7!VQ!SrrCUKOoVcbrrCpROokFHrVQTqPaM4F!Vu6Xrrr89V5;')rr35s
c`N@n^!P[4rrB2"Oo_TCp&>;eP*3NYTTYJ/qu6bbP*3c_s8J/]_Ya?5p\p<UkktGdS!&r<s.GO<
Pk+j)~>
s8N*pBD;E/2.Q[dr;Q]s\cqs1!-nD@!5AFb!,_W5#Wp\P3\Fb=BGp^I!n8dBp\t6of_>CG8c(+B
>lXiUq^qkjq>UHfq^qt(0jj;DrrB\1/ct,6_#>qdn,31f2_H_Brr;sM!/p^R"#)>[VZ$Mp`r7Rl
j8[d2/cb5/s*t~>
s8N,>chIGB3+`-ir;Q]sl*'s`!.+PB!5JLf!,qc7#X6qU4Y^CFcaN`N!n8mEp\t8qoCr7b9`$OH
?N:&Wq_8(oq>UHfq_81.1h#bIrrB_20`pG9_>Z.hn,31f3\`@Mrr;sP!0$dS"#DYdVu?Vqa8Rdp
jT!p40`^S3s*t~>
s8N,lp@nRiQEL8frr2ouqsXC]!4_q+!8[X;!42S&#at#6R$+NMp@8%[!pGd+p\t9_rV-<lT_jlS
WrN+aqiUrfq>UHkqN:oEXS)Gi!8RR:!qH<IrfR9Tr;QkcP*3c_s8J/]_YX97PEM*UrVllWrfR?P
s6KZI!;5s`J,~>
s8N*"ht[3QHmm_HrrW-!V#()kL]%/T^Fh-.m/-edE;T\84'hjc!?d'nrrW-E4SSjV7=b15!($T:
!J6%)/dYh`iESc'/l?#Aq#:Bg8GOk<6Mpce<A#n*s8W&s/c\`GrrY24/rfl1r[n2/qYpXO/hW:b
rs!$e/kl<Fr;J;K6hC>.~>
s8N,#p%\OgIOj.MrrW2$iqiZTM>[AV^bIQ7m/-edEr5n:5%"<h!Op_ZrrW-H5PP0Y`7Oea!(?f@
!JH7-0aV4eiEf#/0iVVKq#:Bg9DL:B7Jm)h=>;O5s8W&s0`Y,LrrY;:0ou>6r\4D3qYpXR0enmj
rs!*j0i.iLr;JDN7e?Y1~>
s8N,frV6Bo]8u=UrrMQ`qYpQ3r;QoVP*2F0qu6i-rVuncWrE#!nbE%^!re1Ip\t9dp\=agSGnZP
^;'Z1$*+$oWh,B:Uo_Z4rrMthq2t`Kqu6kuP*2aCs8N"\!2TPm".,16`;]f9OoWAqrr\IJP/dJ#
#-X2QUAt8lrfR8PoDa=~>
!rp=Qqu6i!0J4q,?2OX&J1^Wt!KYk2rr_L<3TL#:#3^))s8P6?rVlr<!<2or!MD+?rrJ3@q>UHK
r[n3Grr39i/hXg:s,&E]_Y!j0nZ,.V/ce-7rr2ucr[n2Wrr3(`/hSjUrrY24/rfl1r[n2/qYpXO
/hWCfrrDBa/c_RDrrASg/cbhAs*t~>
!rq\pqu6i"1GLR8?i0j(f=^t[!Kbq3rr_L?4QQD>#3^/.s8P?DrVlocXS`"uTecBB!SkHcrrCgQ
0`_"Jrs;%I0tmVeM_Qs'o`#!_X@W4C!C6Y`rrDHc0`\T[rr\K?0f/b-"$/.kO8f1Y0`[1/rrY&3
0pVb<!:9\>!29Dl!1j*D!;uKhJ,~>
!rr2fqu6iJPEM)jWr)esp[\1\!Q=:%rr_kUR.1"Q#4o6us8SP*rVloqmed"bc'.o%!Vl9^rrDEb
OoYCYrs>0XP2-*;_NL)>o`#!fe"6H"!1Nld!;?DT!8%5M"3-LePPkF_Q]dNMrr;t\!5eU4"-\n2
a8Z)=p&:*Sc2R_CbPmY)rUg,?~>
!rn9GqYp]hp%h&Qr;Qio!7L`D!B0KHrrGrFqYpcs/hZr!7Buai!BkH#rrV^>>58*ugAq'L"'mN3
^]"0=TIqj;s8Rp.0#@)X!r1rTr@S*7rr2t3r[n1Wra>e/r[n1rrVlsY/hW._s8FVNMu*JQ/c`6W
rr@ZM/c]8X@/sU4/c^(es*t~>
!rq#lqYp]hp%q5Ur;QisX7?&d!BK]KrrH#IqYpcs0erM(8@&-m!Q!4^rrVaB>kn="oW.ff"(*c;
_#=9>TeS9Ds8S!30uEJ\!r;&Wr@n<:rr2t5r\4C\raPq3r\4D"rVls\0enags8F_QN;ESR0`\T[
rr@`O0`YY]@fTm80`ZIjs*t~>
!rr&eqYp]nqYcu`qu6]br;-EoQMCFY!Mm@(rs&FbP5P?Of),IJoCi+^!r.hUq#:BnmeQkbWfiP%
rVm2KP*36Qs1sk]hsp^Jr:A;6OoY+QrrB;&OoVQ^XT5=!OoW&krr\UNP/RA"rfR8uqZ$PX!8%5M
!5AGq!3H1%!36$]!4_\$J,~>
!rki=q#:E$.-1=+!L584rrFhGrr3#3:&FqqcWrX4r;U`0qYpT1#5eE$A23iY!<C^IrrY#/0(&W;
$-+YN?2sq]/hY!8rr]BF=_[d5!:9\;!20>k!&=1"!&FNQ"#hhbNW/tW/c^h,rrC":/cac-rr=bG
/cb_?s*t~>
!rp3hq#:E&/*-X.!StB`rrFqJrr3#4;#C7tcX/m9r;Uf3qYpT]Yl"G$Ai'2]!NkqhrrY,51%"r>
$-4hU?iU.a0epQ?rr]EI>\j6:!:9\>!29Dl!&XC(!&a`T"$/.kO8f1Y0`[10rrC%;0`^,1rr=kJ
0`_%Bs*t~>
!rqoeq#:EJO7E/J!Vu<^rrJ>Zrr3#SUAOrqk,OjLrVs7MqYpTnn,*+cY*8V[!Uos_rr\LKP4nkS
$0%,2WrN+8P*4_trr^c[WNl@#!;6>S!6tNC!0m2?!0mH^".,16`;]f9OoWArrrD!VOoXqLrrA8U
OoYFQs*t~>
!riYEq#:Cq,5V6;!@!j*rrFbGrr3!lf),ION%V(/s4g<CrrE\7r;Qnh0`GIgqYpRPR/6gb9.hjN
rVm21/hUl<s+r?\_>+$1LAie*jS]#Xq>MuKSH&VRpFZP$/hXL0rrY24/rfl1r[n2/qu6XZr[n<M
s8Skd/c`'Is*t~>
!roIjq#:Cs-2[W?!P.(_rrFkJrr3!nfDGRPN\RO5s4gBErrKCdr;Qni1]CmnqYpT1hYR6S9eeBW
rVm220emJDs,/Td_YF-2L]0".jS]#Xq>N)NScA_TpFub*0ep'7rrY;:0ou>6r\4D3qu6X]r\4NP
s8Sqf0`\EMs*t~>
!rqceq#:DmN;`\S!V,s\rrJ;Zrr3"mlMLSc_iiIJs6ZNTrrMWcr;QoCPQ.`<qYpTeq>1*nTotT*
rVm2UP*3*Ms1sk]ht[3O_#BJsnbiCer;Mi]bQ%U_oTB4+rr3(eP*3c_s8J/]_Ya?5Rf8HPrVuoD
oTB4)p&BO~>
!rN&tq>UMV/Q2NH!U0U[rs%10q#CBn2#@4VLWBGpr\+*BrrI:=r;QrV0)oB*q"t'lAS1f="/[\'
;>pM$?7mk's8Rp.0#@>_!:0V:!CH>Trr?O-/dLV?s$&+g;"FPM!:9\;!&OWS"#hhbNW/tW/c_"3
rrM7or[n2Trr3*n/hTihqs+58r[n3KpA]X~>
!WK+orrS68<;caspo=/i#2:m-s8W'WqYpbVaT);>1AU_F!Ro*errq76s(!JOqu?]AqYpYq0elZ+
rs<'f0qnXIM_Qs'q#:?\r\4FAnbrIfAc=Chkl:ZL0elVtqs=;:!&jiV"$/.kO8f1Y0`[C8rrM7q
r\4DXrr3*p0elGpr9OIM1B'!.r:^/@~>
!WVT_rrU-$V>U>orpKU^!pl*Irr2t`qYpT4ir8rYP5P+T!VZ0`rrqhRs/h7Wqu6]jp%n[jd#sQf
rVm2)P*4)is1sk]ht[3Op&:*TSG<'_!3Q6`#P7uqS!&r1q"sa`OoUdHrr\UNP/RA"rfR9#rVloh
YPs[bf)G[PTotS4q>Bmco_jpQrV$8A~>
!SIVMrrLO#r;Qej0DYVPY:f\Os.YbSrr@9BrrKKZrVllkr;Qf4(]OF>hZ*RGOY\Baqu6\V8,<2a
/d?.<d;(?e3WB$\M(UEsp\t58r@S1OAm-ke/d"?;s3gm!!4r%,!4)SV#3#U^2_H_Brr;sM"#)Pg
1]/j.<W<$ueG_'#UAFli]`'M`f(T,o~>
!V<PirrLR$r;QfV]D;I2YVH"Ss.kqVrr@?DrrKN]rVllkr;Qf`[Jp12hZ*RIP;Xoiqu6]O`VKQ5
0a;OBdVU]n4T>?_M_Qs'p\t5:r@nCTBO*Cm0`scAs3ps%!5&+-!42YZ#3,[_3\`@Mrr;sP"#Dkp
2Z,94=T8@#ec%9'U\auj^&B_dfCo5p~>
!WDN^rrM<Kr;Qfno(i:ieWTk1s3Ja^rrBS.rrLcdrVllor;Qfpnc&Onmf3<[`g)S`qu6]loD/Fc
Op85SkH^86R/[*f_30u=p\t6&rK75ZYGqJ`".T>jkPgVEg\UpMfD^p;nGiNTP*3c_s8J/]PQ$jF
OoVEZrrD<_OoWf(rrCjROoXe@s*t~>
!PBKPrrCdPrrRh;q"t'lAnCf<#*CP:s8Q9PqYp[ts8W$MrVlq&3Vr^S!VHHlrrtAHs7e)sWVZVq
W\4,I!7gou!B'$=rr\*10#@8]!,M?^"@rFjs%NDE!<)co!;-7C#"8Lk2_H_Brr;[E!.=bF!+>dY
q>UHor[n18pA]X~>
!U@/mrrCdPrrRn?q"t*kcM@JEP;3%9s'=.NrrcC&s8=\NrrQIgqYgEpr2]hs#!#'Npb";$qYpTW
]D;I,f(q*%39L5?",elg_Y4!0DYPph8cA\h:AusJrVHNop&6ZM8,rTM0enags7S/IIf99H@fA+X
rrE&t0`XQ6s*t~>
!W2EcrrDBarrTsVr;6Kpp@\7]#0)i*s8T(^qYp\qs8W(]rVlquR/Hp_!WMNdrs"gZs8.n@de`tE
qXXI^!9s?C!LE<Urr^*#P2H!5!4)B_"J>\ns.TFT!<2ip!;ZVW#+kkpQ]dNMrr;\T!5&40!3H0_
q#C>V!1W]^J,~>
!N.[Ors8QF_u)PLcQr5^rrG-Gq>UJF0)kkO6L+IJ"l#sTs6!5Xrr]5Q0#IPd$3\KNs3e"Kr@]_s
qYpT4)u0F<qMIou/kCs"rVltq?<khLrrU>^62iJ<4Ct_ps8H=)SG<*aJGrjYqu:56?Dmf&!*/o&
"(HACn,31f?!^j!q#:JK?=$h(p]#a~>
!TUonrs8QI_u)VPcR/A`rrKplq>UJH1&h1R7-a[L"l$$Vs6*A[rr]8U0uNqh$E`ars3n+MrA$&$
qYpT^[.sY+qMS'&0h[Q*rVltr?s_1PrrU>`7/enB5A.5!rrZ\;@%I)m!.t2X"oJ=4?sou5rr?-t
?ist`T()[X"(,GDP5,%[K4&(mn+Zj4~>
!Vu<crs8U]hu9",k)B07rrM`dq>UK.P5bI^SFl^Y"mjY:s7<&crr^]4P2H3;$Ldoms6.u4rfWEA
qYpTnnG*"gr5,.jP+]_lrVluHX/b=TrrV5fSGnZQRBP0>s8K&!bP;);^&G&9rVs(%X3pqH!2fXo
"0K&Vp\b$nWiN2>q#:K2X/i5np]#a~>
!LH%Lrs+Vbg,&:!1s>gs!?8WGrrI=/rr3!Wnb`=d?2jj)I)Q!`!^JsEr;QdLT`"fkr@Ti#rrUOV
qtTR_n+lt^q="7L"7l0ZnFZ,Lo)&Fd!W2Qfmf)n[o(_VQoD\I`mK<.Up@A4NqXss_o(qeRp&O^Z
mJuhWp&OOTs*t~>
!T(]lrs+YcgG\U%2pD4"!Oq=hrrIC4rr3!Znb`=d?iL'+I`;9c!^f9Kr;Qf0iV`]Wr@p/)rrV\n
rqQ<iqu-Npqu$9mrVuopo_JRdqu?Tjrr2usq"b!hrr<#prr2usrqcHj!<)cjrr2usq"b!hrr2up
p]#a~>
!Vl9brs-OCm$7>FQ/qlC!V-'_rrKX!rr3"bq"t'kWrE#!]AWYfs-j#cr;Qfgq>C6orfWNArrW,e
s7lTjs8;lps7H<es8;lps7lTls8W)ss8N#ms8)`ns7lTlrrE&ms*t~>
!KTbMrs8KUeGoPWK.O_6rrEJQq>^J6rr3!\hu*KT[6OZj!&"3L!TEhNrrGNEqu6\DG5;.<fTH47
[J9cP~>
!SbQlrs8KXeGoPYKJ1(;rrKCoq>^J8rr3!_hu*KT[R0un!&=EO!TNqPrrL!iqu6\FGkq@?o;RqT
!9a.WJ,~>
!Vl<drs8Rel2Udc^6.7LrrMWeq>^K%rr3"emem(cfpi!@!0[9[!V$$arrM`dqu6].\G?.*rU,m<
!;cKjJ,~>
!KB\GrrV2/p\b$l#1WJK!Fi#,rrG_qrVm)4/t;n@p+H(="8DU_K7a+)[/eDGs*t~>
!SbTgrrV21p\b$lYjqPh!G&2/rrGf!rVm)50qA:Dp+c:@"8DN-f7O#(kcX@Ls*t~>
!Vl<^rrV]&qu$HpnGN+^!NjfLrrJgmrVm)VP0<n*qNCRP"8hodpk&MIqsXIYs*t~>
!Kfh?rrEVOq>Ujsk5Wg]/h\i<PWg^:rr3#f0)#;IMXEWfJc>e8!9F"VJ,~>
!SkW_rrKFnq>UjukPrsb0etJFPsI-Crr3#f1%tVLMs8%3Jc>f-XnMVkJ,~>
!Vl<VrrMWeq>UPjo)InOOp&_DS!(,WrrMhVpAY63o(2X-rrVuarVHPE~>
!Lu4?rrF@Kq>ULMq/lTg!'U<6!B6SJrrVL=^\@a19`H9;Jc>iPC'+;0s*t~>
!T:f`rrK[mq>ULPq0)`l!'pN<!BQkOrrVL@_"[j2:]IocJc>iPd'!BFs*t~>
!Vu?VrrM]eq>UM[r3uZg!1NnM!LM%/rrVhUhY7$PUAsc[Jc>fOp@%kXJ,~>
!NdmArrGWEqYpp$/iYjc0J;2L]B9"j!pVC(q#:J^V#LGLJcGcM!CJX>s*t~>
!Tgu`rrL*lqYpp$0fqKo1GRbS]]T+k!pVL.q#:J`V>mUgJcGcM!Q2YKs*t~>
!W)BVrrMcdqYpp%P*_Q1PEP>,h"(@B!q_YGq#:K<d/WP4JcGcM!V>mZs*t~>
!Q>iDrrI@DqYpco/nt@c^+T0["7.Wmg\UpQj=^Jn!:0Xg]r.d0htm-J*pTPuh>dNQV5Ls*s8&O4
QLb(UeYf57s88Xks/)]mqu73+^]4>uVPh--e>K5Es7)i_VuNUrb5_LVrr39&V5L9ls0&>qrr3#r
_>aH=o;/@_ZL%SfrrF!Xr;V9~>
!U[;arrLWkqYpco0l-gh^G5K_"7.`sg\UpQj>$].XR#li^8S!4i;36K*p]Z#hZ*WRVPq0-s8&R7
Qh(1Veu5G:s88[ms/2fqqu73+_#OH"Vl7?0eYoGHs72r`W!'$As8Tn6rs8S#W2]gsYc+DtrrN#6
rr32oVPpH"mJd"_!OgGSs*t~>
!W2BUrrMldqYpcsP-P&eh3.O4"8.h?m/$_bnWNqNn*BuWh9sa$melk[*q[h,mJm4cdF-hMs8:3O
aSGl9lI+&Ts8C<ns3]9CqYq&^s8V`=dbXrfdaJ0qps8rfs3Ur0s8UsTrs8VOdaA*pf$_qErrN)U
rr32udF-Ipp&=jg!V,m]s*t~>
!TX7MrrKSIqYpRcJ,]HK3mRL"!;HIF!8IJP#6*%'\c8ZYli.1C.s8F#/BR\e'L"-Ss8V770(/ba
/;!8W.AQq6,>eC>"asbXLG%*Rru&!fW;llk/'n7j/a!*5kqpRY.+_Uos->(krr34[0%L"%Te*DH
rrGhLrVm'_1q\Yt2ZEXS!pp!!rVqB~>
!VWYbrrM>jqYpReJc>ZM4jWm&!;HII!8IJP#6*(+])Uj'li.1D/pFp+0?a.j'L=H[s8V7:1%,(e
08&Y\/>W=:-;sjC"b0t\M)!QXru&$jWW2un0$sXo0]rE8l8Qp`/(e(!s-G7orr34\1"H=(U+`bM
rrGqRrVm'b2nb,(3WAsV!rB"_rVqB~>
!WDKVrrMudqYpSf]`.p3R-")B!;lbY!:9X`"m;'&s8)<Prs%hP\(d^@j7rWgS!'fOs7;D:p]'?;
^@o^1ci<d!V#LAt];ttIP3DfC):abps8SgTk5Y@Bo)Ja^Q/n[#lD`&.aH,fhrs-B'lMpn0Ok'I2
!MYhWrrndTgqo5?qu6`smect_J,~>
!ri8cnG`LhjS]#^^M*ZI^G&FUrr?X0/daM#YD>%gFoVJABD_]1rkdagrs.j<OoPGu/FiQ9$XS*7
s8Q_o0E1u,C]=>;M^@!T-"R#T"gO!c_(PEXrsG\T6i[2U,Xq`eS,WEqq==Pe-NEf#s,J^3rr35@
0)P\KdjicErrP_ASc8WnA2jPg6S.p-rrJJirVqB~>
!ro=rnG`NhpAFpp^hWoL^b\j\rr?^20a]q*Y_kCpGQ7]bchm_Drkmghrs.j?P5kQ$0Cel<$XnB?
s8Qet1B.;2D>sP=N@<EY-t`JY"gX-f_D1`\rsG_X7fWMX-V+2lSGrNrq==Pg.KB/'s,Sm:rr35A
1&V(Odk/uHrrPeFT)S`oB0-(m75+?2rrLuZrVqB~>
!rq]fnG`OWrVZ["hQ[%[hNO`-rrB8%Op[Mqe\RQ7\,ZL#pA=jkrnm5;rs/4X`rH(FOnebP$`pn(
s8T=CPQ1ZIZMsk-_i<s]NirB]"kLQjhidj5rsI/8ScA`aNLp0cb5VDKr:p;iNrT"Hs2:(trr35]
P5YF\k`G!,rrSjUbl7VHYF#:hS<<[FrrMrarVqB~>
!rjCDnG`M\D#OA=lTE@'1G1<Pp&>$bq(;YKrr3!!f_YUNkH'kodeEbHlR7nqs7\+2rr2ukrVm72
]-=ZV0?c*KYq=l4rrqR4LArQ1rr3/,MuUUGp&"aq3fPMrs8TndRPOa>!EUWIrs8BKR4J%3s2-Jg
rs74+dJs6_A4o/drs!!ms84Mtr;-Eo4CJ0gJ,~>
!ro^inG`O.d/EtLlp&[-2DHrZp&>$bq(VkPrr3#"oD8IikH0tse+`kIlRS.us7\46rr2ulrVm74
]I(,]1<hTRZS:>:rrqR7M#Sl8rr3/-NW6jMp&"aq4c_)&s8TngRl1'B!EglNrs8BNRP+=6s26Yk
rs77/dJs6`AkkYkrs!*ss84W&r;-Eo_9DoYJ,~>
!rqfenG`O]pAP!ropOmEQ'.=+p&>$gq2t`Urr3#erVHNso$k[jkkG)^ooI,ms88&$rr2uprVm8+
gl0q_PNA#.eroM$rrqtR_#KFtrr3/Q_Z/MVqYU:!RDb->s8Uu=bEVl'!N1tWrs8L`b)lN#s59(>
rs7nOkPtS>Y+_?ars#Zns8A+ArqcWqoC`+_J,~>
!rlY;qu6Yup\t9'%fZJ/UbM^!!:oa]!8mZ+!1Noe!L>22rr])JU<iN4!p_7srr30TG`a@F,hW+r
$XMLV;Uo*p0E-h[lMgeer?Z@]-"R#T"gO!c_(PEYrrfl?s"7+HrrQ(Ml2(D\=!mqH#b->/,[CBL
__1pG&Mu)es8Pp<ZR;sVs(!c50!tHMrrh*WqZ$SG~>
!rpKiqu6Z!p\t9YZ2Xb(V)/$(!:oa]!8mZ.!1a&g!TCchrr],NUX8]6!p_A"rr30WHBTgP.,"V"
$X_[\<RkL!1B*1clMgeer?uXb-t`JY"gX-f_D1`]rrfoCs"RFNrrQ.Rl2(D\=Xj@M#b?M2-XHcP
`%h6N&N2>js8Q$@Zmr<[s(=)?0t-oRrrhtorVunJ~>
!rqrdqu6ZGp\t9knG`Fgd$+Bj!;Q0c!:K`I!6Y<@!W2Ncrr^W0cK=g"!qhVorr31c\]0Z&NU-TD
$`iZeV<P&?PQ/L^o`"jorf+8aNirB]"kLQjhidj6rrh&Xs,s/VrrT$Zo_SRgViLcV#g9mQNN)sX
i0+)*&XALAs8SnUf8eD]s0%TJP1]^.rrN)drr7K~>
!ro#Lqu6XqpAY4..m>ri/d+:(:lXH,rrKM]r@S^A1c%!C0L%oq?%]3/s7Z!O0_tJC%-o=(s8V76
Y3@CXlMge_$XM>q1fs%b0E/R8g&D!Ti?sTa-tE8V"fII^_(PEYrs;J)E(DD#s8S6:q>UIs-N=#b
-YIEW0)tsh0)knNeLJuHe0o?T.7sR>A2jNA1\^nO5(*D1J,~>
!rq8nqu6XtpAY6'H9aRh0a'^1;ifo1rrKPar@npG2`<TR3^H5-?\PW6s7Z!O1\peF%-oF,s8V::
YN[U]lMge_$X_Mu2d,Lh1B+p?g&D!Ti[Tug.qS_["f[Xa_D1`]rs;S/F%\%-s8S9>q>UIu.K9>e
.Va&c1B7Bm1&h4Qeh,;LeLPc^/5-$CB0-&J2Y[4R_U\\dJ,~>
!rr)equ6YnpAY6c`L<.jOp%2DUr;`prrLf:rK7e[Q'IZ$R%'Y>X2!-Ks8)NbPPk1T%/#\$s8V\R
eFSa^o`"ji$`iRJQ)F<7PQ0F$li-nfn;bEdO08K^"jt<hhidj6rs>I"[@iTAs8U*'q>UJnNrK%a
O0H'ZP5kR?P5bIml&b*.l&W9[OJ)XRYF#9QQ1t:\oCr:bJ,~>
!rq$Uqu6eh46^=dqYpr/"NIOBV5C<#Z_D=9/cmt@o_\Y.c:]iD/jOofZa6X-?R<A$`P%jl=YUpL
5><\qchRMIlR7qrs%jp7k9es]rsN,`mj($qaY3Yn0N.oM"b%QTs&;DcrtIuOs2$D]s8RN<cTU7@
hBlA)s,f)4rutMks8T$+h:fmtCB)4)r;ZfH.ae9'T\A+i.)u9u2ui=uB))B.?WR4,J,~>
!rqnqqu6ei53ZakqYprdWk>I6VPpW)[%hR=0`jCHo_\Y.cV62M0ggMo['Zj1OFt'[`P%po>;RHW
6;K;&d.mVJlRS5"s&16=k:,3arsN2cn0^I#atitr1KFGS"b7iZs&MYhrtJ)Rs2$M`s8RT>cp-LC
hC2Y.s-,A9rutVrs8T'.h:fq#D#_F.r;ZfH/^jZ-U"\4l/&qU%3reY&C&%]1c,p"cJ,~>
!rr5fqu6fCRIdW9qYps"m+Tt;d*^=pf?U`%OoguPq>:13je7m$P+0,6f@SHtbfe\siS;\iW0<($
S"c(fk4nr`ooI/ns.kVNo8`28rsPmmpPkXAj-0NCPGS9Y"h]c`s/)CertM*hs59(:s8Tb,k*kc*
mZ+7Gs2L<!s!"D%s8UKKmHihnZ2`aFrVuo^OQZYEc0Xf?O5^,AQiHcBYPA,"p%8:aJ,~>
s8N**\GQ:-jgm)>rrFebq(;n9;dl,$/hWFfrs)UX/rGKd9f`/)(G@Hg+<VaN00N!5ASuZU\=-t^
/4Es:g&D!YW[h2.9J>K,Z7*Bas"<dqM#UP,ra[Uds5#)2YAt\us8ULf;2n^Ds8HFYItMJ]m6XeP
s7n`+Vu&n6[ep(Mof+;Lk:h&Ys6:m_dU=_js8R?pGdSj/s8TGT4mt-YbQ!_UUAY#qrpqH<kPtR4~>
s8N,'l21J^k.<ACrrToe0`!L/5uhEb@50L'rVm+*0enTE=\q6Z0c)Gl,pX]Z-8Ie\?>+;%6Fr\"
1+u.-S_F)C$EGd`MbZ%hs0F8irVnM?1lD<:K)TC:[/\u3@]shr^]4>_+B4G,6i[-q0S+po-ga?(
s8VmX/ZAP;0Y%#[,ka;KfB4r6s8V@41"'SdPlLc007(&T]Dqo=/3iV]1!KZ]/u/=D"oGm6p](8D~>
s8N,hqtpBpo%T?&rrVf<Ont4GS#*70X-/XerVm,#P*3\uVkTRWOo^Z(rehDHN0B^(Wire>SD25j
PEDH<bNo0-$Ib-9_4m.`s4<=erVnMEPemBu^&G0sfDk5uXjsh:h>dN=M58(hS,`MjOhAH6NV8m>
s8W"aOO=#uOkKX3,l<pgl1:+Js8V_NP3B!0a8c1MOh',(g].<+O.,g-P2uY_OO!b'"oe&\rVunJ~>
s8N+B8,</c0_+u=60SDG=]ea+<b-K)<A#mmIo%bfs8Q"MIUk2d/oQ2Z?<(#d-sTq[>@))jMOC#l
@4iZ]<-";4eA-oB6<6X7aNiW@rrU6Zbl.PQl,1UBl1Y%l`5)EQp;*B4nGWA)laEM,s8W)9`59C/
_<f%Rq>]p#`67qm`5MQQ,j3(`h;ZAls8VB&`6?*:_>jPT`4sR8ec5Zs`5:EM`5quY`4l3M"9-RK
A,ZFX~>
s8N,K`VKN71\1AA"Sf$M>?_#/3G*Vf=>;O$JQ":os8Q(RJ7^Yn0l_\b@9?Z/9O(h.?=@\tMjp>s
A2,;i<cj\:eA7&G79E0?aj/cBrrU9\bl.PQl,:[Cl1b+m`5)EQpVNW9nGWA)laW_1s8W)9`5BL2
_X,.Tq>]p#`6A"o`5MQQ,j3(ahW)Pos8VB'`6H3<_>jPT`5'X:f)Pcu`P^WP`6&&Z`P;?N!q<D<
rVqB~>
s8N,no_JLfPPFtR"TIo0W2T]n)m6``Vim47]VL_6s8SpY]WRK^P-hj/X/DkmV>dG4WiNG:_TU0?
XceU/VR=P!khj4TS>W!rioTS,rrV3<jSf)ioAJX.oD8IDi84M6qVTTQp\k+0p"@[Ms8W)Vi8<GM
ht>m`r;ZNKi8jdmi8FM4,kBmOmdT/ns8V`Li8rkShZ*W7i83SRl2UeHi8<t\i8Xe:iSFG3!rVN[
rVqB~>
s8N,F$i0f'E2WL2#-e/IJ8ndWr[ndI=E-GU>AGkkc7YJG/m`0n0`E[M:FS;YMiERFG%OZ9,8r7'
-ujZrUSDlr0N<J/gZZSHO,K(+m%"(\irPRS<NuN'J,~>
s8N,gZ2+D#EiAd5#3W":Job3_r\5!O>&un_?#;=rcS:hO0k"d#1]B*S9N,MWN/igLG\C,B-64m3
.s$3&V5/6%1fo19gZZSIOH#F2m%"(\p9*GY=L%o+J,~>
s8N,tnG3(b[F+dL#5[`$]sXl/rfRk_W3r%VWj7ffjc[`RP,kdbPQ$^jTW5B6_o'@*\?MftN/*Uf
O0uU=cd0%jPGYtFm.9/Z`5BRHp72-frU9[5Vq1nJJ,~>
rr3!'X8;htr$qX>rrRWUpAP"/i3@&M/lHX@G<*Nl@l5l\3A)q:_<h2K!q,g_)=KN,]r-To4<R".
PGPUmL0n5(Utu(Nl0A8>rs'<hN@li0s8RT~>
rr3#%jneuYr%7jArrUcWrr)j7i3I2S0i`6KGs&rrAiMMg4>ARE_X.<VZi0Xu)=TZ/]r6`t59iU8
Q):prLLFS0V;D7Pl0J>?rs,sdM(p`4s8RT~>
rr3#fqYL3nrfI*RrrMlar;RW&f!:I%V6lDqR,>W\QBJ\DP*3Q:p&FmZpAZ!(QK6iK^oa#_S[6A`
f\"!?X0^1@s8V``Sc8raqS88W])Ve\~>
rr3"d-MdZB;S`&,!c7qiqu70$M_6]1/u,I[^bCWu0X(HT!b;GspAY4Va"%)drt4YAW.A/:9n9V(
i4bSR\Ba::WW*!FqYL3n>UZNL/csB!s*t~>
rr3#U](u@,<5J>/!n".Aqu70$N%m,:0r;!e_)%!(1U-iX!mRqDpAY4Za"@;grt4YBWInJA:k?"-
iP1eV\^0L=WW*"LrVHNqbe'\M0`o]$s*t~>
rr3#po(i:dV;M%I!qu*]qu70'_NL+oP0_U]hNPg>PL]X3!ql$\pAY5_ifF*:rt4tcd_2WKUV,7F
n(l+3g?/#+WW)tmq>UNho$75t!p9O_J,~>
rr3&h!:0L]!q@c=p\t;G!2KDj$J[L==.HsuKmPFKrVlul0,a<TrrmTGaE^gso`#3W\;Os@NMt>(
W;cs&"p!c_rrTP-a8R[k9`G'B~>
rr3&rXnhhn!q@l@p\t<HX5a!U$J[UC=e3:&LOCmUrVlut]sdh5rrmZIaa71%o`#3X\r:<GNiLV-
W;ctCYcd`urrVAbf`!T*:B(9D~>
rr3'!n,E1`!r%fUp\t<hmeQ_Z$LO.WVp!lA^UfT(rVm!!o'u_Srroq4j12)Bo`#3egVU/&`7!lK
W;ctmn*g8RrrW)dmJ`7KU&P(B~>
rVln81AUqNB:ehs"2G./jo#,brnB&jV"F,)]fQ,l!iZ/jp\tEq9)L*s4RE(NiOQ\[rN-#&AInf_
!7LlH"3pnb6iJ\<ci3rp~>
rVloG^A7d0BqY2""7*2/p\b$trnB/oV=a5+^-2Gp!p$H%p\tEq9`6L$5OACQiOck^rN-#&ca3Z$
XRZ;i"7ND_7K,"Aci3rp~>
rVlolo(i:dYfuh@"8hQYrVQU#m#oH:q=_GVR/R$dqX=%MrrrCprf?Q:m/I4WgYM>tXT&IsnGi7N
r;Q]ur9sZUrfR9Drr7K~>
rVlrc!:Tda"TBa@MC/)t"%`K2iV`]bF.gq\s1a6/s8T_B'smW6"o!k+T.9AprsWoVs(e*Z!*?CU
!2t#=/c^+os*t~>
rVlrpY58"p"T9dDN%+N$"3%@hp&+h!FeR7`s1jB3s8VAi[HI8`"o!n.TIo\trs[>\s)+=\X30SV
XQFX(0`ZLts*t~>
rVlrun,E1`"TFG,_N+Bj"8)'UrVZ[)[a""8s5(NNs8VucnGDqZ"oH-Nc&h^ars\Vjs0BfCme-GN
n,0TmOoW#js*t~>
r;Qe>+8Pp@Z8]$2s7*/crsA!N!%YA7rr9mKrVm%ah/iW5L%bNNmUlK<3h9rYrr_rMf&HE'%"/HZ
FtPCor)P@(kG8)0!&jcTJ,~>
r;QfH\G?./ZT>?9s7*5ersAM:Y.Nljs8TpHrVm%hqU;RSg%PFMmV)W@4e?D_rr`2ko(MeW%+VT^
GVLq$s2hpfqP=*F!'0uWJ,~>
r;QfknbN1hesFsGs7k(=rsA\rn+->Rs8Us0rVm&Ds7YpNp\+Ukp94M(REVq0s8Mujrs\Yks1"5T
])VEno)I&8OoUgGs*t~>
r;Qik!5nX4"EL/Cs$ZP[%XfH)!#e(-DI#4%";3`;o`#(^s6[)A/Yi=OdPh.9'F=bQiqiZWF9V8e
r@S4Hj8/G0r@S*&r;V9~>
r;QirXmGl`"E^>Is%)h_%bA.oXgPaYd*'2+S[ZE&o`#(as6[,C0VeXRn\D00Z`^=SpA4dke$&\%
r@nFMjS8A/r@n<)r;V9~>
r;Qitn,)q\"LcRWs.8o`%eoM^n+#i8p@\%Gj7;g>o`#)cs7Y%.P,&$Yr:9:Tn,i%OrVHNrp@&$p
rK7;WnGE%"rK70Gr;V9~>
qu6].#5J3#ET9C]o)As_V0#j=@uA:nrrP)3Z).I&h\$9-rVm#U2?Y\mrr3,m/._Q7oI^-Fqu;0~>
qu6]]Yk\5#F6#abo)AskimZ&lcJ%[QrrP29ZDIR'osCsKrVm#n^TG3Crr3,u]X.TroJ$?Jqu;0~>
qu6]on+cnb[IKdbo)AdjqY'p]!VlT[rrSOMf;8KLrUB=LrVm$!o'c/JrVlujnGgAtOoX#/s*t~>
qYpR=3r&^U:oN%H"*r>S1St*dr)s,:s7s]</hUbhs&K7=X@E:[s,6M%!.+MAJ,~>
qYpT+_"dp1;lSFL"+/JV2PpEgrlV@is7s`?0em@qs2qLQjMe4=s,?S)!.=YCJ,~>
qYpTdoD&=dUs[ip"1m[bQ)+Eop$_VSr8OZ<P-=3Oo^D>Ho^;>N_Xruk]))GW~>
qYpWk!5A:/!r4LNr;Qclhu<e%Jh#fXrro(r-3*t,q(;o;s+Uk`o`%q`/c\Q?s*t~>
qYpWpY3Pi_!r=[Sr;Qclhu<e'KIu5]rrqA^])Vbnq(W,@s4O["r;Tjj0`XrDs*t~>
q>UKar;$?or0,Y.rrDrRrr]aDORT.I"o@ZWs8U+7OpB).p[IkTs/,FO!295gJ,~>
q>UNJ!;?6g!rb'9rr3'!,k^0s"P*OO21VV)"k*VZdJqVe/d$S$s-`I2!AOKJs*t~>
q>UNeY5S1r!rb0>rr3'!-hcR""P3UQ3.\"-"nAe#nGgr00`ut)s-rU7!Aj]Ms*t~>
q>UKnn+Zh_QG`\$!KHs8rrhTddZqJCrrrAin,34Koo]Eirr:.4Oo^dGq>Ys~>
q#:DE!;uWl##n_)s6,OCir9.K4TGF^W;d%!!29Gb7.W&20Cg^qo_AH:~>
q#:EHY5\4r#$4t-s6,UEir9.M5QCadW;d%]Xl9<P8+SJ81@d."p%\Q;~>
q#:Bhn+ZhcVPjIoo>KVf"Nd,4s/2gq"o@]`s7r8GOoY=Qs*t~>
p\t:S%0$&%".M.IL]%/PEU*Q(c2IYEk).;mWW*-_!5SVI0B+SanFus5~>
p\t90ZM4A$S2^J)r;Qb=lMgk0rVlu^N65e4rrq2[li1]Ti\:H&p]#a~>
p\t9cnFuqbbE`+Dr;Qc*lMgkGrVluj_W.eurri,cqu<nZOoY7Ns*t~>
pAY.8)>F.<a<`jjLd;"?-fqB'rrD`drrRXPV#LAqaCb+ErratTeb_,\/cbG8s*t~>
pAY0'\+fn0a='0qMF7FD.cm`+rrD`drrR[RV>gJra_CFIrrg$<nbP-%0`^b;s*t~>
pAb0_p\tT[NL8hDSH&VLo$dC6!;cHi!kbJYrr3&ZYPP6u"S2$Zr060'!;Q9fJ,~>
p&>%5*;BI>ql1uo/H4V_K\cP*"GM1%Jk,V9#?j#qs8Vd^e#WKQrC?udp?sm)/d"oAdR!d`!DE4\
s*t~>
p&G'$p\tQsX!rZSro)Xeh>@3TLOB,T8bi;j>rcKrs7T%5WrE7AYK-S/39r:$;>&C+r%S4Hq=Xc<~>
p&G'^p\tQuduM,(s7#BimJHnd^UjHZTD8EkWKs[ds8/GPWrE7on+?VQQKs\9U\X)Cr/q)Sr:U)?~>
o`"tE(&@V(#P<g!Bl!K,o_ndr^Hml$BX.=3mGRsC#PsEko)&Iel)amjl?4EQ:>Gl;0C(4jTDecm
jIo@B`Uj+[~>
o`#!*[Jfk"#P<j%CMii3o_ndr^dO8-C9mU6mGRsC#PsKno)&Iel)amjpscjVa7TD$1@$XpT`+ln
jJ#LG`q04\~>
o`"s_nFlkeq8&)rZMU*drVm2[SA^;hf),L@n,<7krPYo7rVuohXT&P)p[R_ErVt%*OoWc*rrhl;
US6Z<s*t~>
oD\km$.nnN)X+Z#s(q`8ec35(dJs0J>Q=_>2?2d!81TMalMh=``1;0V6om%O,9@a>(&em]()Ru3
+snfp2a'Q'??(U`W4U@6oBQ>an%t&]0+@nFYjVOr7I)Q,4Q5Q)J,~>
oD\m6Z1I\h)X+]%s).l:ec35)df99L?2sqC3</-&9.l+ilMh7hmGQO<_nj(!\[]*H[2$'V[^WcW
]"G_k_8F=;db*F:l0n?DlMh:im+]UpZE1n)qZ!illS/E)iT^Am~>
oD\manGW(\)Y;\+s0Mb*l2TN!kPtP2WW3")QN-NoTTI"`l2M"dq=aLQoCDJNnbqtSnc/1Zo*P'^
p@n@Yqu$EllMh:lr:opTnF,uFrr:Q@l]M::n*0k&~>
o)AcV!/^=I'Dqg<nGbOcl2S2@BE.c\3@dOcg$SegerWlg(B=F@/l->=SZK96`lui\f%8O(da$"S
^ULGEQ\]m"=%5%m'*A(3*XE;n*[N9h1H%3R3B&cJ-m'-.!!!?dE2qCes3,UGl7N($kPp&~>
o)AdIXP*4F'Dqg=nGbXil2S5CC&e#b4>'-mg?nnho%_@%[B6L5]>i4Ni8s1gmd]oAp%J+Po^hVB
mHWlqhV$E(ai(m&ZE=)+$*LP>[CEf\]tV8[^_+;o]=>5PXK/P>dcC!!s35aMl7i:)kPp&~>
o)Addn+ZGR'E.sap]$YeoDdLVYlFWbQ][l]lg=]br:opTnaGo8o(;YMq>0sbr;HWks8W'.rVZQh
q=s^Xo^hYDnF,iFmK2kHnG_tWo)/+Yndb3Zn*f]6oCi%Zs8V/hR-Kh7a63JQ~>
nc&^9#r_>FrsjmOpYB#ns(5MOs8Ur)p?qqe`,.4/!&ehk`om=#+6L_PSrJ8EE+rik?=$oD?XdS\
DKC)SMO(!?]?/[doD\b)rpo7-d`K86YcF[tU8"H_YIMKuj8&]S"5'])=nOBN3N:llW':&1!F=gL
s*t~>
nc&^[YJ9u+rsjpQpYB,qs(GbVs8Uu,p[8%fmErYMX1m$@mJ-Y[+61JMTT=\MEbf8s@:3GM@:X"d
E-6MZMNsm:\AZeOmem(krqc?Zmd00"jlHF$"m+q4me$ATrri>PXas^L0a0\>hqtCuqCr"XjlZSn~>
nc&^hnFQYNrsloeqsCBAs0/N/s8VN"qsOIjr:]^Mmdg)Iqu6Qo+7S:Ac,@<*['?d9X/i8$XKA\2
ZaREX_8jdKf\biYoD&=grr)clqu-BkqZ?]orr)j"roqqFW:c;WR*tEjd[L#q!NP\Ps*t~>
nG`Ui=TF<Nrri:>4]SZ_rr`/4N^E78#.%8/"]V#Hrr3,Z[#8ZkgFa3u5Y4mYA8?10I=Qs'KS"`#
FD>,Y54L6+0<>!M!Ob`%/cf>&jSs`~>
n,EI3XkNFI"T<C,=Kq`'"8fip7I^<]kK0m/al)gjrrh8fNGM;C0blZ89N>A1D0(#QJq\r6KS"Sp
Cgg4,nM(&"XS`"u[o!&Y!Fa14s*t~>
n,EI^n+cPT"TGftVq(_F"9%&oSacX`qXj7Eo_JIbrrhfC_m,oiOqj:PTV\ZkZF.3S]tV7r^:h+d
Z)a[hn<*e#qu6]MUAg;VXQ8IBJ,~>
mf*C,*"oIJrrVhb\,$%(e+3MBl?<=BCWl_W!md3;YV#req=sskl-&k]s*t~>
mf*CU[^>2irrVeb\G?.)eFNVCpscLQd-go5!md6>YV?/jq=sskl-&k]s*t~>
mf*CdnaQDJrrW#?g%kXJkjn`WrqGmNpAFpi!p7V)Y`]$ir:p9noAof.s*t~>
m/I0L&/MD@rrDl\rrh=a!(4I!rrL#XXY'UQeGk%~>
m/I1CZ*i]drrDl\rri&<WPe$#rrL&[XYBgUeGk%~>
m/I1_nF?AJrrDu_rri;nmdp>TrrM&cXc`\4eGk%~>
lMh!F)ZYEBj8TDXCB.3"s8V):X=aN;k0s?\~>
lMh"@[]J*Pj8TD_d&G(^s8V,<X>'`AkL9H]~>
lMh"^na?2Nir98Wme$MYs7!n,Oo_'Ce,Op~>
kl1k(2?aA?dIcZ&#J'mkmJm4EA$7Kf3D!A,cdDcC~>
kl1kR^TFcnnGDGL#O/>(q>^KQB!3ol4A9"7cdDcC~>
kl1h`o'Z#Br9+(bqsX+Ts8VPjYEB$UTW,]gdJn^~>
jo5^g1D9a%AZaJ>l0n36o*=nd#H[t*oP_;n$SXG"5t=[MCl>@>o#q&`~>
jo5\K^9XcGcfO]iq"jOX#Q2]Hjo>AQEOmk41H7Qd8l8].NNLOtbQ!(~>
jo5V_o'l):p%nUbmf!F`n,!(aq6[_r$^6mES=cRSZGY/Qpri\f~>
iVs+]<$2qd#6XGq"<ROAs16E,&hl+"3BKDj6q9jLB6oT4\'*b*^Ai]~>
iVs,Cage^_XfV#m"M"I2s1?K0&i2F+4?c&!7nQHWC4),=\BNt.^Ai]~>
iVs)Xo^VG?n*fZEnc&OggWYfnPEhH$R@B_<T:r0e]#;qJjRE)]s*t~>
a8Z2>@-fKe0/,(71GgsI2`Wl[4?bqo5tkBlEds"8VmXFjiU?cFs*t~>
a8Z2>@dGfj1,C^C2E*TU3]oMg5<qM%6r$ouFFfF@WOBaoiUHiGs*t~>
`r?%?l]V:3)O-MPQBml)R$jA2S"#qAW3<VA_ogB[i90S'W;hA~>
a8Z."r.5E3MisO'X0fOYcI_">oDOLFJ,~>
a8Z1%K`-N5L5hFfUo^u;`m<8plLXt1s*t~>
a8Z.Xr4WZU_oBjFe(EI7jm)=,q>Q3MJ,~>
JcE:\J,~>
JcE:\J,~>
JcE:\J,~>
%%EndData
showpage
%%Trailer
end
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 0 TeXcolorgray 1201 -132
a Fi(UNIVERSIT)1876 -163 y(\023)1865 -132 y(E)38 b(DE)h(SA)2336
-163 y(\177)2344 -132 y(ID)m(A)1177 -12 y Fh(F)-11 b(A)m(CUL)j(T)1575
-37 y(\023)1566 -12 y(E)34 b(DE)e(TECHNOLOGIE)553 108
y(D)637 83 y(\023)628 108 y(EP)-8 b(AR)g(TEMENT)35 b(DE)d(G)1617
83 y(\023)1608 108 y(ENIE)h(CIVIL)h(ET)f(D'HYDRA)m(ULIQUE)326
300 y(M)m(\023)-46 b(etho)s(des)34 b(n)m(um)m(\023)-46
b(eriques)35 b(\(S4,)e(2)1536 268 y Fg(e)1567 300 y Fh(Ann)m(\023)-46
b(ee)34 b(licence)g("Hydraulique)g(&)f(G)m(\023)-46 b(enie)33
b(civil"\))-246 561 y(TD)1602 b(M.)33 b Ff(HAFIANE)1425
b Fh(2019-2020)p -246 625 4252 5 v -99 2729 a Fe(Solution)38
b(n)m(um)n(\023)-54 b(erique)p -99 2764 958 4 v 42 w
Fh(:)40 b(T)-8 b(outes)42 b(les)f(m)m(\023)-46 b(etho)s(des)42
b(utilisen)m(t)g(la)e(discr)m(\023)-46 b(etisation)42
b(de)-99 2849 y(l'une)26 b(des)g(formes)g(suiv)-5 b(an)m(tes)27
b(de)e(l')m(\023)-46 b(equation)26 b(GVF)f(:)g(\()p Fd(S)1965
2864 y Fg(0)2029 2849 y Fh(la)g(p)s(en)m(te)h(du)g(fond)f(du)g(canal)
-99 2969 y(et)32 b Fd(S)74 2984 y Fc(f)152 2969 y Fh(la)h(p)s(en)m(te)g
(de)g(la)g(ligne)g(de)g(c)m(hage)g(totale)g(\))5 4124
y

 5 4124 a 5 4124 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 171.39482 61.14246 ] concat

 pgfs


 5 4124 a
 0 setgray
 5 4124 a 5 4124 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 171.39482 61.14246 ] concat

 pgfs


 5 4124
a
 0 setgray
 5 4124 a 5 4124 a


 pgfr

 restore

 restore

 restore

 save
 0.5 TeXcolorgray
 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 1.47408 -4.19524 moveto

 1.47408 120.81082 lineto

 346.9849 120.81082 lineto

 346.9849 -4.19524 lineto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 1.81422 -3.85509 moveto

 1.81422 120.47069 lineto

 346.64474 120.47069 lineto

 346.64474 -3.85509 lineto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 2.15437 -3.51495 moveto

 2.15437 120.13054 lineto

 346.3046 120.13054 lineto

 346.3046 -3.51495 lineto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 2.49452 -3.1748 moveto

 2.49452 119.79039 lineto

 345.96446 119.79039 lineto

 345.96446 -3.1748 lineto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 2.83466 -2.83466 moveto

 2.83466 119.45026 lineto

 345.62431 119.45026 lineto

 345.62431 -2.83466 lineto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 3.1748 -2.49452 moveto

 3.1748 119.1101 lineto

 345.28416 119.1101 lineto

 345.28416 -2.49452 lineto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 3.51495 -2.15437 moveto

 3.51495 118.76996 lineto

 344.94403 118.76996 lineto

 344.94403 -2.15437 lineto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 3.85509 -1.81422 moveto

 3.85509 118.42982 lineto

 344.60388 118.42982 lineto

 344.60388 -1.81422 lineto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 4.19524 -1.47408 moveto

 4.19524 118.08968 lineto

 344.26373 118.08968 lineto

 344.26373 -1.47408 lineto

 closepath

 pgffill

 restore

 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 4.53539 -1.13394 moveto

 4.53539 117.74953 lineto

 343.9236 117.74953 lineto

 343.9236 -1.13394 lineto

 closepath

 pgffill

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{0.3 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 0.0 moveto

 0.0 122.28491 lineto

 342.78966 122.28491 lineto

 342.78966 0.0 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.9 0.9 1 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 1.41731 moveto

 1.41731 120.8676 lineto

 341.37233 120.8676 lineto

 341.37233 1.41731 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.95811 58.15363 ] concat

 pgfs


 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
15 3802 a Fh(d)p Fd(H)p 15 3846 143 4 v 32 3937 a Fh(d)p
Fd(x)195 3869 y Fh(=)27 b Fb(\000)p Fd(S)435 3884 y Fc(f)1167
3869 y Fh(\(Charge)33 b(totale)g(:)f Fd(H)j Fh(=)28 b
Fd(z)f Fh(+)22 b Fd(y)j Fh(+)2453 3802 y Fd(v)2504 3766
y Fg(2)p 2448 3846 100 4 v 2448 3937 a Fh(2)p Fd(g)2557
3869 y Fh(\))25 4069 y(d)p Fd(E)p 25 4113 133 4 v 36
4205 a Fh(d)p Fd(x)195 4136 y Fh(=)i Fd(S)358 4151 y
Fc(o)419 4136 y Fb(\000)22 b Fd(S)578 4151 y Fc(f)1164
4136 y Fh(\(Energie)34 b(sp)m(\023)-46 b(eci\014que)35
b(:)e Fd(E)g Fh(=)28 b Fd(y)d Fh(+)2453 4069 y Fd(v)2504
4033 y Fg(2)p 2448 4113 100 4 v 2448 4205 a Fh(2)p Fd(g)2557
4136 y Fh(\))50 4326 y(d)p Fd(y)p 48 4371 110 4 v 48
4462 a Fh(d)p Fd(x)195 4394 y Fh(=)308 4326 y Fd(S)368
4341 y Fc(o)429 4326 y Fb(\000)d Fd(S)588 4341 y Fc(f)p
308 4371 326 4 v 319 4468 a Fh(1)g Fb(\000)h Fh(F)-8
b(r)583 4426 y Fg(2)1960 4394 y Fh(\(Profondeur)33 b
Fd(y)t Fh(\))p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 5 4124 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 2965 3640 a
SDict begin H.S end
 2965 3640 a 2965
3640 a
SDict begin 14.5 H.A end
 2965 3640 a 2965 3640 a
SDict begin [/View [/XYZ H.V]/Dest (AMS.1) cvn /DEST pdfmark end
 2965 3640 a 0 TeXcolorgray
2965 3384 a
SDict begin H.S end
 2965 3384 a 2965 3384 a
SDict begin 17.5 H.A end
 2965 3384 a 2965
3384 a
SDict begin [/View [/XYZ H.V]/Dest (equation.0.1) cvn /DEST pdfmark
end
 2965 3384 a Fh(\(1\))2965 3652 y
SDict begin H.S end
 2965 3652 a 2965
3652 a
SDict begin 17.5 H.A end
 2965 3652 a 2965 3652 a
SDict begin [/View [/XYZ H.V]/Dest (equation.0.2) cvn /DEST pdfmark
end
 2965 3652 a Fh(\(2\))2965
3909 y
SDict begin H.S end
 2965 3909 a 2965 3909 a
SDict begin 17.5 H.A end
 2965 3909 a 2965 3909
a
SDict begin [/View [/XYZ H.V]/Dest (equation.0.3) cvn /DEST pdfmark
end
 2965 3909 a Fh(\(3\))p 0 TeXcolorgray 0 TeXcolorgray
1810 6287 a Fg(1/)1880 6287 y
SDict begin H.S end
 1880 6287 a 0 TeXcolorgray
Fa(1)p 0 TeXcolorgray 1917 6244 a
SDict begin H.R end
 1917 6244 a 1917 6287
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.1) cvn H.B /ANN pdfmark end
 1917 6287 a 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
